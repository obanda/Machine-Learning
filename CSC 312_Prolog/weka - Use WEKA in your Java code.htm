<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="search" href="http://weka.wikispaces.com/space/opensearch" type="application/opensearchdescription+xml" title="Wikispaces Search (weka Wiki)">
<link rel="alternate" type="application/x-wiki" title="Edit This Page" href="http://weka.wikispaces.com/page/edit/Use+WEKA+in+your+Java+code">
<link rel="alternate" title="weka - All Changes" href="http://weka.wikispaces.com/wiki/xmla?v=rss_2_0" type="application/rss+xml">
<link rel="alternate" title="weka : Use WEKA in your Java code - Discussion" href="http://weka.wikispaces.com/message/xml/Use+WEKA+in+your+Java+code?v=rss_2_0" type="application/rss+xml">
<link rel="alternate" title="weka : Use WEKA in your Java code - Edits" href="http://weka.wikispaces.com/page/xml/Use+WEKA+in+your+Java+code?v=rss_2_0" type="application/rss+xml">
<link rel="microsummary" href="http://weka.wikispaces.com/page/microsummary/Use+WEKA+in+your+Java+code/edits">
<link rel="microsummary" href="http://weka.wikispaces.com/page/microsummary/Use+WEKA+in+your+Java+code/messages">
<script src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript">
var wikispaces_isUserLoggedIn = false;
var wikispaces_isUserOrganizer = false;
var wikispaces_isMain = true;
var wikispaces_username = '';
var wikispaces_spaceName = 'weka';
var wikispaces_projectName = '';
var wikispaces_wikiName = 'weka';
var wikispaces_wikiText = 'weka';
var wikispaces_isDefaultSpace = '1';
var wikispaces_method = 'view';
var wikispaces_object = 'page';
var wikispaces_page = 'Use WEKA in your Java code';
var wikispaces_id = '';
var wikispaces_domain = 'wikispaces.com';
var wikispaces_main_domain = 'wikispaces.com';
var wikispaces_asset_url_prefix = 'http://c1.wikicdn.com';
var wikispaces_beta_features = false;
var wikispaces_isMobileSite = false;
var wikispaces_isUploadCapable = true;
var wikispaces_can_discuss = false;
var wikispaces_has_gdocs = false;
</script>
  <title>weka - Use WEKA in your Java code</title>
  <meta charset="utf-8">
  <link rel="apple-touch-icon" sizes="144x144" href="http://c1.wikicdn.com/_/z6371z4x/i/logo-144.png">
  <link rel="apple-touch-icon" sizes="114x114" href="http://c1.wikicdn.com/_/j5j77xz3/i/logo-114.png">
  <link rel="apple-touch-icon" sizes="72x72" href="http://c1.wikicdn.com/_/vq8j5432/i/logo-72.png">
  <link rel="apple-touch-icon" href="http://c1.wikicdn.com/_/38515190/i/logo-57.png">
  <link rel="shortcut icon" href="http://c1.wikicdn.com/_/55v9k02z/i/logo-16.png">
  <style type="text/css">

/* ==== LINK and TEXT COLORS ==== */
.WikiLogoName a { color: #FFF; }
.WikiFooterNav, .WikiFooterNav a, .WikiLicense, .WikiLicense a { color: #000000; }
#wikiBox { color: #000; }
.sidebar a { color: #000000; }
.sidebar .wiki span a { color: inherit; }

/* ==== GENERAL STYLES ==== */
body { background-color: #ECEFED; font-family: 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 13px; margin: 0; padding: 0; }
#wrapper { background-color: #ECEFED; float: left;  position: relative; min-width: 925px; }
#wrapper, .header, #wikiBody { width: 100%; }
img { border: 0; }
.footer a, .sidebar a { text-decoration: none; }
.footer a:hover, .sidebar a:hover { text-decoration: underline; }

/* ==== HEADER ==== */
.header { background: #CCCCCC url(http://c1.wikicdn.com/_/4qkjx897/i/header-overlay.png) repeat-x bottom left; float: left; overflow: visible; position: relative; }
.WikiLogoTable { float: left; padding-left: 17px; margin: 13px 0; }
.WikiLogo { float: left; padding-left: 17px; margin: 5px 0; }
.WikiLogoName a { font-size: 1.5em; font-weight: normal; text-decoration: none; }
.headerSwoop { background: transparent url('http://c1.wikicdn.com/_/94v39788/i/pl-background.png') no-repeat 100% -20px; min-height: 85px; width: 100%; }
.headerInner { float: right; line-height: 1; min-height: 52px; width: 100%; }

/* ==== CONTENT ==== */
#wikiBody { clear: both; padding-top: 15px; }
#wikiBox { margin: 0 15px 5px 228px; min-width: 682px; width: auto; }
#wikiBoxTable { table-layout: fixed; width: 100%; }
#leftGradient { background: transparent url(http://c1.wikicdn.com/_/4q746115/i/left-gradient.png) repeat-y top right; width: 5px; }
#rightGradient { background: transparent url(http://c1.wikicdn.com/_/95jqk048/i/right-gradient.png) repeat-y top left; width: 5px; }
#topGradient { background: transparent url(http://c1.wikicdn.com/_/1vq21590/i/top-gradient.png) repeat-x top left; height: 3px; }
#topLeftGradient { background: transparent url(http://c1.wikicdn.com/_/xz02150z/i/top-left-gradient.png) no-repeat top right; height: 3px; width: 5px; }
#topRightGradient { background: transparent url(http://c1.wikicdn.com/_/60q073q6/i/top-right-gradient.png) no-repeat top left; height: 3px; width: 5px; }
#bottomGradient { background: transparent url(http://c1.wikicdn.com/_/26v3jzz1/i/bottom-gradient.png) repeat-x top left; height: 5px; }
#bottomLeftGradient { background: transparent url(http://c1.wikicdn.com/_/vj85kk7z/i/bottom-left-gradient.png) no-repeat top right; height: 5px; width: 5px; }
#bottomRightGradient { background: transparent url(http://c1.wikicdn.com/_/93186876/i/bottom-right-gradient.png) no-repeat top left; height: 5px; width: 5px; }
#centerCell { background-color: #FFF; padding: 15px; }
#content_view.wiki { overflow-x: auto; overflow-y: visible; }

/* ==== FOOTER ==== */
.footer { padding: 10px 0 15px; text-align: center; }
.WikiFooterNav { padding-bottom: 5px; }
.WikiFooterNav a { font-size: 1em; padding: 0 8px; }
.WikiLicense img { vertical-align: text-bottom; }

/* ==== SIDEBAR ==== */
.sidebar { position: absolute; left: 0; padding: 5px 6px 0 17px; width: 200px; }
.actions { padding-bottom: 15px; }
.WikiActions { list-style-type: none; margin: 0; padding: 0; }
.WikiCustomNav { padding: 0; width: 100%; }
.WikiCustomNav ul { margin: 0; padding: 0 0 0 1em; }
.WikiCustomNav ol { padding-left: 1.5em; }
.WikiCustomNav ol.includePageList { padding-left: 0; }
.WikiCustomNav a { font-family: 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 1em; }
.WikiActions li { padding-bottom: 6px; white-space: nowrap; }
.WikiActions a { font-size: 1em; font-family: 'Lucida Grande',Arial,Helvetica,sans-serif; }
.WikiActions img { padding-right: 0.5em; }
.editNav { padding: 5px 0 15px; text-align: center; }
.editNav a { color: #666; }

  </style>
<link rel="stylesheet" href="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/217420326D.css" type="text/css">
<link rel="stylesheet" href="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/4x5j5vx6-internal.css" type="text/css">
<link rel="stylesheet" href="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/5v39535j-internal-bootstrap.css" type="text/css">
<link rel="stylesheet" href="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/80q5k59q-internal-bootstrap-responsive.css" type="text/css">

<!--[if lte IE 8]>
<style type="text/css">
.WikiInternalHeaderNav {
  margin: -3px;
  zoom: 1;
  filter:
    progid:DXImageTransform.Microsoft.Shadow(Color=#999999, Strength=3, Direction=180),
    progid:DXImageTransform.Microsoft.Shadow(Color=#999999, Strength=3, Direction=270);
}
</style>
<![endif]-->
<script src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/q9kk82v3-common.js" type="text/javascript"></script>

<script type="text/javascript">
  var _gaq = _gaq || [];

  var wsGoogleAccount = 'UA-80504-1';
  _gaq.push(['_setAccount', wsGoogleAccount]);
  _gaq.push(['_gat._anonymizeIp']);
  _gaq.push(['_setDomainName', 'wikispaces.com']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_trackPageview']);

  _gaq.push(['_setCustomVar', 2, 'Authenticated', 'Guest', 2]);
</script><script src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/6zx1z8k7.js" type="text/javascript"></script></head>
<body><div style="margin-top: 28px;" id="WikispacesWrapper" class="BannerDisplayed"><div style="top: 0px;" id="WikispacesBanner" class="BannerDisplayed">You are not a member of this wiki. <a href="http://weka.wikispaces.com/space/join"> Join now</a>
<script type="text/javascript">
function dismissJoinWiki() {
  ws.common.displayBanner(false);
  jQuery.post("http://weka.wikispaces.com/wiki/dismissjoin");
}
</script> &nbsp;<a href="#" onclick="dismissJoinWiki(); return false;">Dismiss</a></div><div id="WikispacesNoticeHolder"><div id="WikispacesNoticeJs" style="display: none"></div></div><div style="right: -129px;" class="WikiInternalHeaderNav WikispacesContent WikispacesBs WikiElement floating"><div class="WikiInternalHeaderNavMenu"><span class="WikiInternalHeaderNavMenuArea guestUserName">guest</span><span class="slideMarker divider">|</span><span class="WikiInternalHeaderNavMenuArea"><a href="http://www.wikispaces.com/user/join?goto=http%3A%2F%2Fweka.wikispaces.com%2Fspace%2Fjoin" rel="nofollow" class="WikispacesXDomainDialogLink">Join</a></span><span class="divider">|</span><span class="WikiInternalHeaderNavMenuArea"><a class="WikispacesHelpTrigger" rel="nofollow" href="http://help.wikispaces.com/">Help</a></span><span class="divider">|</span><span class="WikiInternalHeaderNavMenuArea"><a href="http://www.wikispaces.com/site/signin?goto=http%3A%2F%2Fweka.wikispaces.com%2FUse%2BWEKA%2Bin%2Byour%2BJava%2Bcode" rel="nofollow" class="WikispacesXDomainDialogLink">Sign In</a></span></div><div style="display: none;" class="panel hidden" id="NoticeTool"><div id="NoticeToolList"><ol style="display: block;" class="dropdown-menu"><li class="js-last text-center"><a href="http://www.wikispaces.com/mail/list/?folder=Inbox">View All Messages</a></li></ol></div></div><div style="display: none;" class="panel hidden" id="WikiTool"><div id="WikiToolList"><ol style="display: block;" class="dropdown-menu"></ol></div></div><div style="display: none;" class="panel hidden" id="HelpTool"><div id="HelpToolList"><ol style="display: block;" class="dropdown-menu"><li class="js-last divider hidden"></li><li><a class="WikispacesHelpTrigger" rel="nofollow" href="http://help.wikispaces.com/">Help Wiki</a></li></ol></div></div></div><div id="wrapper">

  <div class="header">
    <div class="headerSwoop">
      <div class="headerInner">
        <a href="http://weka.wikispaces.com/" class="WikiLogo WikiElement"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/logo.gif" alt="weka"></a>      </div>
    </div>
  </div>

  <div id="wikiBody">
    <div class="sidebar">
      <div class="actions">
        <ul class="WikiActions WikiElement WikiControls">
    <li id="WikiActionHome"><div><span class="WikiActionSupplemental" style="float: right;"></span><a href="http://weka.wikispaces.com/"><i class="icon-home ws-icon-fixed"></i></a><a href="http://weka.wikispaces.com/">Wiki Home</a></div></li>
    <li id="WikiActionChanges"><div><span class="WikiActionSupplemental" style="float: right;"></span><a href="http://weka.wikispaces.com/wiki/changes"><i class="icon-time ws-icon-fixed"></i></a><a href="http://weka.wikispaces.com/wiki/changes">Recent Changes</a></div></li>
    <li id="WikiActionPagesAndFiles"><div><span class="WikiActionSupplemental" style="float: right;"></span><a href="http://weka.wikispaces.com/space/content"><i class="icon-file-text-alt ws-icon-fixed"></i></a><a href="http://weka.wikispaces.com/space/content">Pages and Files</a></div></li>
    <li id="WikiActionMembers"><div><span class="WikiActionSupplemental" style="float: right;"></span><a href="http://weka.wikispaces.com/wiki/members"><i class="icon-user ws-icon-fixed"></i></a><a href="http://weka.wikispaces.com/wiki/members">Members</a></div></li>
</ul>
        <form action="/search/view" method="post" class="WikiSearch WikiElement"><input class="WikiSearchInput" name="q" placeholder="Search" type="text"> </form>      </div>
      <div class="WikiCustomNav WikiElement wiki"><a href="http://weka.wikispaces.com/">Home</a><br>
<a class="wiki_link_ext" href="http://weka.wikispaces.com/space/pagelist" rel="nofollow">All pages</a><br>
<a class="wiki_link_ext" href="http://weka.wikispaces.com/tag/list" rel="nofollow">All tags</a><br>
<a class="wiki_link_ext" href="http://weka.wikispaces.com/space/filelist" rel="nofollow">All files</a><br>
<a class="wiki_link" href="http://weka.wikispaces.com/FAQ">FAQ</a><br>
<a class="wiki_link" href="http://weka.wikispaces.com/Not+So+FAQ">Not So FAQ</a><br>
<a class="wiki_link" href="http://weka.wikispaces.com/Troubleshooting">Troubleshooting</a><br>
<a class="wiki_link" href="http://weka.wikispaces.com/WEKA+Mailing+List">Mailing List</a></div>      <div class="editNav"></div>
    </div>
    <div id="wikiBox">
      <table id="wikiBoxTable" cellspacing="0">
        <tbody><tr>
          <td id="topLeftGradient"></td>
          <td id="topGradient"></td>
          <td id="topRightGradient"></td>
        </tr>
        <tr>
          <td id="leftGradient"></td>
          <td id="centerCell"><div class="contentBox"><div class="innerContentBox">
<div class="ws-menu-bar WikiControls WikispacesContent WikispacesBs">
  
    <span class="PageTitle"><a href="http://weka.wikispaces.com/Use+WEKA+in+your+Java+code">Use WEKA in your Java code</a></span>
      <div class="btn-group pull-right">
                              <span data-original-title="you do not have permission to edit this page" class="btn disabled tipme" title=""><i class="icon-pencil ws-icon-fixed"></i> Edit</span>
                              <a data-original-title="no discussion posts" class="btn tipme" title="" href="http://weka.wikispaces.com/page/messages/Use+WEKA+in+your+Java+code"><i class="icon-comments ws-icon-fixed"></i> 0</a>
                              <a data-original-title="view 11 revisions" class="btn tipme" title="" href="http://weka.wikispaces.com/page/history/Use+WEKA+in+your+Java+code"><i class="icon-time ws-icon-fixed"></i> 11</a>
                              <a data-original-title="more options" class="btn ws-btn-more dropdown-toggle tipme" title="" href="http://weka.wikispaces.com/page/menu/Use+WEKA+in+your+Java+code"><i class="icon-height-only ws-icon-fixed"></i>…</a>
        <ul class="ws-more-menu dropdown-menu pull-right">
              <li class=" dropdown"><a class=" ws-tag-dropdown-toggle" href="http://weka.wikispaces.com/page/tags/Use+WEKA+in+your+Java+code"><span class="pull-right">1</span> <i class="icon-tag ws-icon-fixed"></i> Tags</a>
          <div class="dropdown-menu pull-right ws-tag-dropdown-menu">
          



<form action="#" name="WikiTagForm" class="WikiTagForm"><input name="wikispacesFormToken" value="68df86b888110e7ae7211bc4fcd797627d09a374" type="hidden"><input name="wikispacesFormToken" value="68df86b888110e7ae7211bc4fcd797627d09a374" type="hidden">
  <div class="WikiTagList">
    <i class="icon-tag ws-action"></i>
        <ul class="unstyled">
                          <li><a href="http://weka.wikispaces.com/space/content?tag=source%20code">source code</a></li>
              </ul>
      </div>
  </form>      </div>
    </li>
              <li class="divider"></li>
            <li class=""><a class=" WikispacesDialogLink" href="http://weka.wikispaces.com/wiki/addmonitor?monitorLink=page%3AUse%20Weka%20in%20your%20Java%20code"><i class="icon-eye-open ws-icon-fixed"></i> Notify</a>
    </li>
        <li class=""><a class=" WikispacesDialogLink" href="http://weka.wikispaces.com/page/rss/Use+WEKA+in+your+Java+code"><i class="icon-rss ws-icon-fixed"></i> RSS</a>
    </li>
        <li class=""><a class="" href="http://weka.wikispaces.com/page/links/Use+WEKA+in+your+Java+code"><i class="icon-link ws-icon-fixed"></i> Backlinks</a>
    </li>
              <li class="divider"></li>
            <li class=""><a class="" href="http://weka.wikispaces.com/page/code/Use+WEKA+in+your+Java+code"><i class="icon-code ws-icon-fixed"></i> Source</a>
    </li>
        <li class=""><a class="" href="http://weka.wikispaces.com/Use+WEKA+in+your+Java+code?f=print"><i class="icon-print ws-icon-fixed"></i> Print</a>
    </li>
        <li class=""><a class="" href="http://weka.wikispaces.com/page/pdf/Use+WEKA+in+your+Java+code"><i class="icon-cloud-download ws-icon-fixed"></i> Export (PDF)</a>
    </li>
      </ul>  </div>
  </div>




  <textarea id="autosaveContent" style="display:none;" rows="1" cols="1"></textarea>
  <div id="autosavePrompt" style="display:none;"></div>

<div class="commentContainer">
  <div class="commentSubject">
  <div class="wiki wikiPage" id="content_view">
  <!-- ws:start:WikiTextTocRule:105:&lt;img id=&quot;wikitext@@toc@@normal&quot; class=&quot;WikiMedia WikiMediaToc&quot; title=&quot;Table of Contents&quot; src=&quot;/site/embedthumbnail/toc/normal?w=225&amp;h=100&quot;/&gt; --><div id="toc"><h1 class="nopad">Table of Contents</h1><!-- ws:end:WikiTextTocRule:105 --><!-- ws:start:WikiTextTocRule:106: --><div style="margin-left: 1em;"><a href="#Instances">Instances</a></div>
<!-- ws:end:WikiTextTocRule:106 --><!-- ws:start:WikiTextTocRule:107: --><div style="margin-left: 2em;"><a href="#Instances-ARFF%20File">ARFF File</a></div>
<!-- ws:end:WikiTextTocRule:107 --><!-- ws:start:WikiTextTocRule:108: --><div style="margin-left: 2em;"><a href="#Instances-Pre%203.5.5%20and%203.4.x">Pre 3.5.5 and 3.4.x</a></div>
<!-- ws:end:WikiTextTocRule:108 --><!-- ws:start:WikiTextTocRule:109: --><div style="margin-left: 2em;"><a href="#Instances-3.5.5%20and%20newer">3.5.5 and newer</a></div>
<!-- ws:end:WikiTextTocRule:109 --><!-- ws:start:WikiTextTocRule:110: --><div style="margin-left: 2em;"><a href="#Instances-Database">Database</a></div>
<!-- ws:end:WikiTextTocRule:110 --><!-- ws:start:WikiTextTocRule:111: --><div style="margin-left: 1em;"><a href="#Option%20handling">Option handling</a></div>
<!-- ws:end:WikiTextTocRule:111 --><!-- ws:start:WikiTextTocRule:112: --><div style="margin-left: 1em;"><a href="#Filter">Filter</a></div>
<!-- ws:end:WikiTextTocRule:112 --><!-- ws:start:WikiTextTocRule:113: --><div style="margin-left: 2em;"><a href="#Filter-Filtering%20on-the-fly">Filtering on-the-fly</a></div>
<!-- ws:end:WikiTextTocRule:113 --><!-- ws:start:WikiTextTocRule:114: --><div style="margin-left: 2em;"><a href="#Filter-Batch%20filtering">Batch filtering</a></div>
<!-- ws:end:WikiTextTocRule:114 --><!-- ws:start:WikiTextTocRule:115: --><div style="margin-left: 2em;"><a href="#Filter-Calling%20conventions">Calling conventions</a></div>
<!-- ws:end:WikiTextTocRule:115 --><!-- ws:start:WikiTextTocRule:116: --><div style="margin-left: 1em;"><a href="#Classification">Classification</a></div>
<!-- ws:end:WikiTextTocRule:116 --><!-- ws:start:WikiTextTocRule:117: --><div style="margin-left: 2em;"><a href="#Classification-Building%20a%20Classifier">Building a Classifier</a></div>
<!-- ws:end:WikiTextTocRule:117 --><!-- ws:start:WikiTextTocRule:118: --><div style="margin-left: 3em;"><a href="#Classification-Building%20a%20Classifier-Batch">Batch</a></div>
<!-- ws:end:WikiTextTocRule:118 --><!-- ws:start:WikiTextTocRule:119: --><div style="margin-left: 3em;"><a href="#Classification-Building%20a%20Classifier-Incremental">Incremental</a></div>
<!-- ws:end:WikiTextTocRule:119 --><!-- ws:start:WikiTextTocRule:120: --><div style="margin-left: 2em;"><a href="#Classification-Evaluating">Evaluating</a></div>
<!-- ws:end:WikiTextTocRule:120 --><!-- ws:start:WikiTextTocRule:121: --><div style="margin-left: 2em;"><a href="#Classification-Cross-validation">Cross-validation</a></div>
<!-- ws:end:WikiTextTocRule:121 --><!-- ws:start:WikiTextTocRule:122: --><div style="margin-left: 2em;"><a href="#Classification-Train/test%20set">Train/test set</a></div>
<!-- ws:end:WikiTextTocRule:122 --><!-- ws:start:WikiTextTocRule:123: --><div style="margin-left: 2em;"><a href="#Classification-Statistics">Statistics</a></div>
<!-- ws:end:WikiTextTocRule:123 --><!-- ws:start:WikiTextTocRule:124: --><div style="margin-left: 2em;"><a href="#Classification-ROC%20curves/AUC">ROC curves/AUC</a></div>
<!-- ws:end:WikiTextTocRule:124 --><!-- ws:start:WikiTextTocRule:125: --><div style="margin-left: 2em;"><a href="#Classification-Classifying%20instances">Classifying instances</a></div>
<!-- ws:end:WikiTextTocRule:125 --><!-- ws:start:WikiTextTocRule:126: --><div style="margin-left: 1em;"><a href="#Clustering">Clustering</a></div>
<!-- ws:end:WikiTextTocRule:126 --><!-- ws:start:WikiTextTocRule:127: --><div style="margin-left: 2em;"><a href="#Clustering-Building%20a%20Clusterer">Building a Clusterer</a></div>
<!-- ws:end:WikiTextTocRule:127 --><!-- ws:start:WikiTextTocRule:128: --><div style="margin-left: 3em;"><a href="#Clustering-Building%20a%20Clusterer-Batch">Batch</a></div>
<!-- ws:end:WikiTextTocRule:128 --><!-- ws:start:WikiTextTocRule:129: --><div style="margin-left: 3em;"><a href="#Clustering-Building%20a%20Clusterer-Incremental">Incremental</a></div>
<!-- ws:end:WikiTextTocRule:129 --><!-- ws:start:WikiTextTocRule:130: --><div style="margin-left: 2em;"><a href="#Clustering-Evaluating">Evaluating</a></div>
<!-- ws:end:WikiTextTocRule:130 --><!-- ws:start:WikiTextTocRule:131: --><div style="margin-left: 2em;"><a href="#Clustering-Clustering%20instances">Clustering instances</a></div>
<!-- ws:end:WikiTextTocRule:131 --><!-- ws:start:WikiTextTocRule:132: --><div style="margin-left: 2em;"><a href="#Clustering-Classes%20to%20clusters%20evaluation">Classes to clusters evaluation</a></div>
<!-- ws:end:WikiTextTocRule:132 --><!-- ws:start:WikiTextTocRule:133: --><div style="margin-left: 1em;"><a href="#Attribute%20selection">Attribute selection</a></div>
<!-- ws:end:WikiTextTocRule:133 --><!-- ws:start:WikiTextTocRule:134: --><div style="margin-left: 2em;"><a href="#Attribute%20selection-Meta-Classifier">Meta-Classifier</a></div>
<!-- ws:end:WikiTextTocRule:134 --><!-- ws:start:WikiTextTocRule:135: --><div style="margin-left: 2em;"><a href="#Attribute%20selection-Filter">Filter</a></div>
<!-- ws:end:WikiTextTocRule:135 --><!-- ws:start:WikiTextTocRule:136: --><div style="margin-left: 2em;"><a href="#Attribute%20selection-Low-level">Low-level</a></div>
<!-- ws:end:WikiTextTocRule:136 --><!-- ws:start:WikiTextTocRule:137: --><div style="margin-left: 1em;"><a href="#Note%20on%20randomization">Note on randomization</a></div>
<!-- ws:end:WikiTextTocRule:137 --><!-- ws:start:WikiTextTocRule:138: --><div style="margin-left: 1em;"><a href="#See%20also">See also</a></div>
<!-- ws:end:WikiTextTocRule:138 --><!-- ws:start:WikiTextTocRule:139: --><div style="margin-left: 1em;"><a href="#Examples">Examples</a></div>
<!-- ws:end:WikiTextTocRule:139 --><!-- ws:start:WikiTextTocRule:140: --><div style="margin-left: 1em;"><a href="#Links">Links</a></div>
<!-- ws:end:WikiTextTocRule:140 --><!-- ws:start:WikiTextTocRule:141: --></div>
<!-- ws:end:WikiTextTocRule:141 -->The most common components you might want to use are<br>
<ul><li><em>Instances</em> - your data</li><li><em>Filter</em> - for preprocessing the data</li><li><em>Classifier/Clusterer</em> - built on the processed data</li><li><em>Evaluating</em> - how good is the classifier/clusterer?</li><li><em>Attribute selection</em> - removing irrelevant attributes from your data</li></ul><br>
The following sections explain how to use them in your own code. A link to an <strong>example class</strong> can be found at the end of this page, under the <a class="wiki_link" href="http://weka.wikispaces.com/Use+Weka+in+your+Java+code#Links">Links</a> section. The classifiers and filters always list their options in the Javadoc API (<a class="wiki_link_ext" href="http://weka.sourceforge.net/doc/" rel="nofollow">book</a>, <a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.stable/" rel="nofollow">stable</a>, <a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.dev/" rel="nofollow">developer</a> version) specification.<br>
<br>
You might also want to check out the <a class="wiki_link" href="http://weka.wikispaces.com/Weka+Examples">Weka Examples</a>
 collection, containing examples for the different versions of Weka. 
Another, more comprehensive, source of information is the chapter <em>Using the API</em> of the Weka manual for the stable-3.6 and developer version (<a class="wiki_link" href="http://weka.wikispaces.com/snapshots">snapshots</a> and releases later than 09/08/2009).<br>
<br>
<!-- ws:start:WikiTextHeadingRule:35:&lt;h1&gt; --><h1 id="toc0"><a name="Instances"></a><!-- ws:end:WikiTextHeadingRule:35 -->Instances</h1>
 <!-- ws:start:WikiTextHeadingRule:37:&lt;h2&gt; --><h2 id="toc1"><a name="Instances-ARFF File"></a><!-- ws:end:WikiTextHeadingRule:37 -->ARFF File</h2>
 <!-- ws:start:WikiTextHeadingRule:39:&lt;h2&gt; --><h2 id="toc2"><a name="Instances-Pre 3.5.5 and 3.4.x"></a><!-- ws:end:WikiTextHeadingRule:39 -->Pre 3.5.5 and 3.4.x</h2>
 Reading from an <a class="wiki_link" href="http://weka.wikispaces.com/ARFF">ARFF</a> file is straightforward:<br>
<!-- ws:start:WikiTextCodeRule:0:
&lt;pre class=&quot;java&quot;&gt; import weka.core.Instances;&lt;br/&gt; import java.io.BufferedReader;&lt;br/&gt; import java.io.FileReader;&lt;br/&gt; ...&lt;br/&gt; BufferedReader reader = new BufferedReader(&lt;br/&gt;                              new FileReader(&amp;quot;/some/where/data.arff&amp;quot;));&lt;br/&gt; Instances data = new Instances(reader);&lt;br/&gt; reader.close();&lt;br/&gt; // setting class attribute&lt;br/&gt; data.setClassIndex(data.numAttributes() - 1);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.core.Instances</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.io.BufferedReader</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.io.FileReader</span><span class="sy0">;</span>
 ...
 <span class="kw3">BufferedReader</span> reader <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">BufferedReader</span><span class="br0">(</span>
                              <span class="kw1">new</span> <span class="kw3">FileReader</span><span class="br0">(</span><span class="st0">"/some/where/data.arff"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 Instances data <span class="sy0">=</span> <span class="kw1">new</span> Instances<span class="br0">(</span>reader<span class="br0">)</span><span class="sy0">;</span>
 reader.<span class="me1">close</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// setting class attribute</span>
 data.<span class="me1">setClassIndex</span><span class="br0">(</span>data.<span class="me1">numAttributes</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:0 --><br>
The class index indicates the target attribute used for classification. 
By default, in an ARFF file, it is the last attribute, which explains 
why it's set to numAttributes-1.<br>
You <strong>must</strong> set it if your instances are used as a parameter of a weka function (e.g.,: <tt>weka.classifiers.Classifier.buildClassifier(data)</tt>)<br>
<br>
<!-- ws:start:WikiTextHeadingRule:41:&lt;h2&gt; --><h2 id="toc3"><a name="Instances-3.5.5 and newer"></a><!-- ws:end:WikiTextHeadingRule:41 -->3.5.5 and newer</h2>
 The <tt>DataSource</tt> class is not limited to ARFF files. It can also
 read CSV files and other formats (basically all file formats that Weka 
can import via its converters).<br>
<!-- ws:start:WikiTextCodeRule:1:
&lt;pre class=&quot;java&quot;&gt; import weka.core.converters.ConverterUtils.DataSource;&lt;br/&gt; ...&lt;br/&gt; DataSource source = new DataSource(&amp;quot;/some/where/data.arff&amp;quot;);&lt;br/&gt; Instances data = source.getDataSet();&lt;br/&gt; // setting class attribute if the data format does not provide this information&lt;br/&gt; // For example, the XRFF format saves the class attribute information as well&lt;br/&gt; if (data.classIndex() == -1)&lt;br/&gt;   data.setClassIndex(data.numAttributes() - 1);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.core.converters.ConverterUtils.DataSource</span><span class="sy0">;</span>
 ...
 <span class="me1">DataSource</span> source <span class="sy0">=</span> <span class="kw1">new</span> DataSource<span class="br0">(</span><span class="st0">"/some/where/data.arff"</span><span class="br0">)</span><span class="sy0">;</span>
 Instances data <span class="sy0">=</span> source.<span class="me1">getDataSet</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// setting class attribute if the data format does not provide this information</span>
 <span class="co1">// For example, the XRFF format saves the class attribute information as well</span>
 <span class="kw1">if</span> <span class="br0">(</span>data.<span class="me1">classIndex</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span>
   data.<span class="me1">setClassIndex</span><span class="br0">(</span>data.<span class="me1">numAttributes</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:1 --><br>
<!-- ws:start:WikiTextHeadingRule:43:&lt;h2&gt; --><h2 id="toc4"><a name="Instances-Database"></a><!-- ws:end:WikiTextHeadingRule:43 -->Database</h2>
 Reading from <a class="wiki_link" href="http://weka.wikispaces.com/Databases">Databases</a> is slightly more complicated, but still very easy. First, you'll have to modify your <a class="wiki_link" href="http://weka.wikispaces.com/Databases#Configuration%20files">DatabaseUtils.props</a> file to reflect your database connection. Suppose you want to connect to a <a class="wiki_link_ext" href="http://wwww.mysql.com/" rel="nofollow">MySQL</a> server that is running on the local machine on the default port <tt>3306</tt>. The MySQL JDBC driver is called <a class="wiki_link_ext" href="http://dev.mysql.com/downloads/connector/j/" rel="nofollow">Connector/J</a>. (The driver class is <tt>org.gjt.mm.mysql.Driver</tt>.) The database where your target data resides is called <tt>some_database</tt>. Since you're only reading, you can use the default user <tt>nobody</tt> without a password. Your props file must contain the following lines:<br>
<!-- ws:start:WikiTextCodeRule:2:
&lt;pre class=&quot;ini&quot;&gt; jdbcDriver=org.gjt.mm.mysql.Driver&lt;br/&gt; jdbcURL=jdbc:mysql://localhost:3306/some_database&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.ini  {font-family:monospace;}
.ini .imp {font-weight: bold; color: red;}
.ini .co0 {color: #666666; font-style: italic;}
.ini .sy0 {color: #000066; font-weight:bold;}
.ini .st0 {color: #933;}
.ini .re0 {color: #000066; font-weight:bold;}
.ini .re1 {color: #000099;}
.ini .re2 {color: #660066;}
.ini span.xtra { display:block; }

-->
</style><pre class="ini"> <span class="re1">jdbcDriver</span><span class="sy0">=</span><span class="re2">org.gjt.mm.mysql.Driver</span>
 <span class="re1">jdbcURL</span><span class="sy0">=</span><span class="re2">jdbc:mysql://localhost:3306/some_database</span></pre>

<!-- ws:end:WikiTextCodeRule:2 -->Secondly, your Java code needs to look like this to load the data from the database:<br>
<!-- ws:start:WikiTextCodeRule:3:
&lt;pre class=&quot;java&quot;&gt; import weka.core.Instances;&lt;br/&gt; import weka.experiment.InstanceQuery;&lt;br/&gt; ...&lt;br/&gt; InstanceQuery query = new InstanceQuery();&lt;br/&gt; query.setUsername(&amp;quot;nobody&amp;quot;);&lt;br/&gt; query.setPassword(&amp;quot;&amp;quot;);&lt;br/&gt; query.setQuery(&amp;quot;select * from whatsoever&amp;quot;);&lt;br/&gt; // You can declare that your data set is sparse&lt;br/&gt; // query.setSparseData(true);&lt;br/&gt; Instances data = query.retrieveInstances();&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.core.Instances</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.experiment.InstanceQuery</span><span class="sy0">;</span>
 ...
 <span class="me1">InstanceQuery</span> query <span class="sy0">=</span> <span class="kw1">new</span> InstanceQuery<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 query.<span class="me1">setUsername</span><span class="br0">(</span><span class="st0">"nobody"</span><span class="br0">)</span><span class="sy0">;</span>
 query.<span class="me1">setPassword</span><span class="br0">(</span><span class="st0">""</span><span class="br0">)</span><span class="sy0">;</span>
 query.<span class="me1">setQuery</span><span class="br0">(</span><span class="st0">"select * from whatsoever"</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// You can declare that your data set is sparse</span>
 <span class="co1">// query.setSparseData(true);</span>
 Instances data <span class="sy0">=</span> query.<span class="me1">retrieveInstances</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:3 --><br>
<strong>Notes:</strong><br>
<ul><li>Don't forget to add the JDBC driver to your <tt>CLASSPATH</tt>.</li><li>For MS Access, you must use the JDBC-ODBC-bridge that is part of a JDK. The <a class="wiki_link" href="http://weka.wikispaces.com/Windows+databases">Windows databases</a> article explains how to do this.</li><li>InstanceQuery
 automatically converts VARCHAR database columns to NOMINAL attributes, 
and long TEXT database columns to STRING attributes. So if you use 
InstanceQuery to do text mining against text that appears in a VARCHAR 
column, Weka will regard such text as nominal values. Thus it will fail 
to tokenize and mine that text. Use the <tt>NominalToString</tt> or <tt>StringToNominal</tt> filter (package <tt>weka.filters.unsupervised.attribute</tt>) to convert the attributes into the correct type.</li></ul><br>
<!-- ws:start:WikiTextHeadingRule:45:&lt;h1&gt; --><h1 id="toc5"><a name="Option handling"></a><!-- ws:end:WikiTextHeadingRule:45 -->Option handling</h1>
 Weka schemes that implement the <tt>weka.core.OptionHandler</tt> interface, such as classifiers, clusterers, and filters, offer the following methods for setting and retrieving options:<br>
<ul><li><tt>void setOptions(String[] options)</tt></li><li><tt>String[] getOptions()</tt></li></ul>There are several ways of setting the options:<br>
<ul><li>Manually creating a String array:</li></ul><!-- ws:start:WikiTextCodeRule:4:
&lt;pre class=&quot;java&quot;&gt; String[] options = new String[2];&lt;br/&gt; options[0] = &amp;quot;-R&amp;quot;;&lt;br/&gt; options[1] = &amp;quot;1&amp;quot;;&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"-R"</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"1"</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:4 --><ul><li>Using a single command-line string and using the <tt>splitOptions</tt> method of the <tt>weka.core.Utils</tt> class to turn it into an array:</li></ul><!-- ws:start:WikiTextCodeRule:5:
&lt;pre class=&quot;java&quot;&gt; String[] options = weka.core.Utils.splitOptions(&amp;quot;-R 1&amp;quot;);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> weka.<span class="me1">core</span>.<span class="me1">Utils</span>.<span class="me1">splitOptions</span><span class="br0">(</span><span class="st0">"-R 1"</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:5 --><ul><li>Using the <!-- ws:start:WikiTextFileRule:328:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/OptionsToCode.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@OptionsToCode.java&quot; title=&quot;File: OptionsToCode.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/OptionsToCode.java/82917163/OptionsToCode.java" onclick="ws.common.trackFileLink('/file/view/OptionsToCode.java/82917163/OptionsToCode.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="OptionsToCode.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/OptionsToCode.java/82917163/OptionsToCode.java" onclick="ws.common.trackFileLink('/file/view/OptionsToCode.java/82917163/OptionsToCode.java');" class="filename" title="OptionsToCode.java">OptionsToCode.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/OptionsToCode.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/OptionsToCode.java/82917163/OptionsToCode.java">Download</a></li><li class="grey">2 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:328 -->
 class to automatically turn a command line into code. Especially handy 
if the command line contains nested classes that have their own options,
 such as kernels for SMO:</li></ul><!-- ws:start:WikiTextCodeRule:6:
&lt;pre class=&quot;java&quot;&gt; java OptionsToCode weka.classifiers.functions.SMO&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> java OptionsToCode weka.<span class="me1">classifiers</span>.<span class="me1">functions</span>.<span class="me1">SMO</span></pre>

<!-- ws:end:WikiTextCodeRule:6 --><ul class="quotelist"><li>will generate output like this:</li></ul><!-- ws:start:WikiTextCodeRule:7:
&lt;pre class=&quot;java&quot;&gt; // create new instance of scheme&lt;br/&gt; weka.classifiers.functions.SMO scheme = new weka.classifiers.functions.SMO();&lt;br/&gt; // set options&lt;br/&gt; scheme.setOptions(weka.core.Utils.splitOptions(&amp;quot;-C 1.0 -L 0.0010 -P 1.0E-12 -N 0 -V -1 -W 1 -K \&amp;quot;weka.classifiers.functions.supportVector.PolyKernel -C 250007 -E 1.0\&amp;quot;&amp;quot;));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="co1">// create new instance of scheme</span>
 weka.<span class="me1">classifiers</span>.<span class="me1">functions</span>.<span class="me1">SMO</span> scheme <span class="sy0">=</span> <span class="kw1">new</span> weka.<span class="me1">classifiers</span>.<span class="me1">functions</span>.<span class="me1">SMO</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// set options</span>
 scheme.<span class="me1">setOptions</span><span class="br0">(</span>weka.<span class="me1">core</span>.<span class="me1">Utils</span>.<span class="me1">splitOptions</span><span class="br0">(</span><span class="st0">"-C 1.0 -L 0.0010 -P 1.0E-12 -N 0 -V -1 -W 1 -K <span class="es0">\"</span>weka.classifiers.functions.supportVector.PolyKernel -C 250007 -E 1.0<span class="es0">\"</span>"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:7 -->Also, the <!-- ws:start:WikiTextFileRule:329:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/OptionTree.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@OptionTree.java&quot; title=&quot;File: OptionTree.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/OptionTree.java/82917165/OptionTree.java" onclick="ws.common.trackFileLink('/file/view/OptionTree.java/82917165/OptionTree.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/x-c.png" alt="OptionTree.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/OptionTree.java/82917165/OptionTree.java" onclick="ws.common.trackFileLink('/file/view/OptionTree.java/82917165/OptionTree.java');" class="filename" title="OptionTree.java">OptionTree.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/OptionTree.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/OptionTree.java/82917165/OptionTree.java">Download</a></li><li class="grey">8 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:329 -->
 tool allows you to view a nested options string, e.g., used at the 
command line, as a tree. This can help you spot nesting errors.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:47:&lt;h1&gt; --><h1 id="toc6"><a name="Filter"></a><!-- ws:end:WikiTextHeadingRule:47 -->Filter</h1>
 A filter has two different properties:<br>
<ul><li><em>supervised</em> or <em>unsupervised</em><br>
either takes the class attribute into account or not</li><li><em>attribute</em>- or <em>instance</em>-based<br>
e.g., removing a certain attribute or removing instances that meet a certain condition</li></ul><br>
Most filters implement the <tt>OptionHandler</tt> interface, which means you can set the options via a String array, rather than setting them each manually via <tt>set</tt>-methods.<br>
For example, if you want to remove the <em>first</em> attribute of a dataset, you need this filter<br>
<!-- ws:start:WikiTextCodeRule:8:
&lt;pre class=&quot;java&quot;&gt; weka.filters.unsupervised.attribute.Remove&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> weka.<span class="me1">filters</span>.<span class="me1">unsupervised</span>.<span class="me1">attribute</span>.<span class="me1">Remove</span></pre>

<!-- ws:end:WikiTextCodeRule:8 -->with this option<br>
<!-- ws:start:WikiTextCodeRule:9:
&lt;pre class=&quot;java&quot;&gt; -R 1&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="sy0">-</span>R <span class="nu0">1</span></pre>

<!-- ws:end:WikiTextCodeRule:9 -->If you have an <tt>Instances</tt> object, called <tt>data</tt>, you can create and apply the filter like this:<br>
<!-- ws:start:WikiTextCodeRule:10:
&lt;pre class=&quot;java&quot;&gt; import weka.core.Instances;&lt;br/&gt; import weka.filters.Filter;&lt;br/&gt; import weka.filters.unsupervised.attribute.Remove;&lt;br/&gt; ...&lt;br/&gt; String[] options = new String[2];&lt;br/&gt; options[0] = &amp;quot;-R&amp;quot;;                                    // &amp;quot;range&amp;quot;&lt;br/&gt; options[1] = &amp;quot;1&amp;quot;;                                     // first attribute&lt;br/&gt; Remove remove = new Remove();                         // new instance of filter&lt;br/&gt; remove.setOptions(options);                           // set options&lt;br/&gt; remove.setInputFormat(data);                          // inform filter about dataset **AFTER** setting options&lt;br/&gt; Instances newData = Filter.useFilter(data, remove);   // apply filter&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.core.Instances</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.filters.Filter</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.filters.unsupervised.attribute.Remove</span><span class="sy0">;</span>
 ...
 <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"-R"</span><span class="sy0">;</span>                                    <span class="co1">// "range"</span>
 options<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"1"</span><span class="sy0">;</span>                                     <span class="co1">// first attribute</span>
 Remove remove <span class="sy0">=</span> <span class="kw1">new</span> Remove<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>                         <span class="co1">// new instance of filter</span>
 remove.<span class="me1">setOptions</span><span class="br0">(</span>options<span class="br0">)</span><span class="sy0">;</span>                           <span class="co1">// set options</span>
 remove.<span class="me1">setInputFormat</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>                          <span class="co1">// inform filter about dataset **AFTER** setting options</span>
 Instances newData <span class="sy0">=</span> Filter.<span class="me1">useFilter</span><span class="br0">(</span>data, remove<span class="br0">)</span><span class="sy0">;</span>   <span class="co1">// apply filter</span></pre>

<!-- ws:end:WikiTextCodeRule:10 --><br>
<!-- ws:start:WikiTextHeadingRule:49:&lt;h2&gt; --><h2 id="toc7"><a name="Filter-Filtering on-the-fly"></a><!-- ws:end:WikiTextHeadingRule:49 -->Filtering on-the-fly</h2>
 The <tt><a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.dev/weka/classifiers/meta/FilteredClassifier.html" rel="nofollow">FilteredClassifier</a></tt>
 meta-classifier is an easy way of filtering data on the fly. It removes
 the necessity of filtering the data before the classifier can be 
trained. Also, the data need not be passed through the trained filter 
again at prediction time. The following is an example of using this 
meta-classifier with the <tt>Remove</tt> filter and <tt>J48</tt> for getting rid of a numeric ID attribute in the data:<br>
<!-- ws:start:WikiTextCodeRule:11:
&lt;pre class=&quot;java&quot;&gt; import weka.classifiers.meta.FilteredClassifier;&lt;br/&gt; import weka.classifiers.trees.J48;&lt;br/&gt; import weka.filters.unsupervised.attribute.Remove;&lt;br/&gt; ...&lt;br/&gt; Instances train = ...         // from somewhere&lt;br/&gt; Instances test = ...          // from somewhere&lt;br/&gt; // filter&lt;br/&gt; Remove rm = new Remove();&lt;br/&gt; rm.setAttributeIndices(&amp;quot;1&amp;quot;);  // remove 1st attribute&lt;br/&gt; // classifier&lt;br/&gt; J48 j48 = new J48();&lt;br/&gt; j48.setUnpruned(true);        // using an unpruned J48&lt;br/&gt; // meta-classifier&lt;br/&gt; FilteredClassifier fc = new FilteredClassifier();&lt;br/&gt; fc.setFilter(rm);&lt;br/&gt; fc.setClassifier(j48);&lt;br/&gt; // train and make predictions&lt;br/&gt; fc.buildClassifier(train);&lt;br/&gt; for (int i = 0; i &amp;lt; test.numInstances(); i++) {&lt;br/&gt;   double pred = fc.classifyInstance(test.instance(i));&lt;br/&gt;   System.out.print(&amp;quot;ID: &amp;quot; + test.instance(i).value(0));&lt;br/&gt;   System.out.print(&amp;quot;, actual: &amp;quot; + test.classAttribute().value((int) test.instance(i).classValue()));&lt;br/&gt;   System.out.println(&amp;quot;, predicted: &amp;quot; + test.classAttribute().value((int) pred));&lt;br/&gt; }&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.classifiers.meta.FilteredClassifier</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.classifiers.trees.J48</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.filters.unsupervised.attribute.Remove</span><span class="sy0">;</span>
 ...
 <span class="me1">Instances</span> train <span class="sy0">=</span> ...         <span class="co1">// from somewhere</span>
 Instances test <span class="sy0">=</span> ...          <span class="co1">// from somewhere</span>
 <span class="co1">// filter</span>
 Remove rm <span class="sy0">=</span> <span class="kw1">new</span> Remove<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 rm.<span class="me1">setAttributeIndices</span><span class="br0">(</span><span class="st0">"1"</span><span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// remove 1st attribute</span>
 <span class="co1">// classifier</span>
 J48 j48 <span class="sy0">=</span> <span class="kw1">new</span> J48<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 j48.<span class="me1">setUnpruned</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span><span class="sy0">;</span>        <span class="co1">// using an unpruned J48</span>
 <span class="co1">// meta-classifier</span>
 FilteredClassifier fc <span class="sy0">=</span> <span class="kw1">new</span> FilteredClassifier<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 fc.<span class="me1">setFilter</span><span class="br0">(</span>rm<span class="br0">)</span><span class="sy0">;</span>
 fc.<span class="me1">setClassifier</span><span class="br0">(</span>j48<span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// train and make predictions</span>
 fc.<span class="me1">buildClassifier</span><span class="br0">(</span>train<span class="br0">)</span><span class="sy0">;</span>
 <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> test.<span class="me1">numInstances</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
   <span class="kw4">double</span> pred <span class="sy0">=</span> fc.<span class="me1">classifyInstance</span><span class="br0">(</span>test.<span class="me1">instance</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
   <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"ID: "</span> <span class="sy0">+</span> test.<span class="me1">instance</span><span class="br0">(</span>i<span class="br0">)</span>.<span class="me1">value</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
   <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">", actual: "</span> <span class="sy0">+</span> test.<span class="me1">classAttribute</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">value</span><span class="br0">(</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> test.<span class="me1">instance</span><span class="br0">(</span>i<span class="br0">)</span>.<span class="me1">classValue</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
   <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">", predicted: "</span> <span class="sy0">+</span> test.<span class="me1">classAttribute</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">value</span><span class="br0">(</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> pred<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="br0">}</span></pre>

<!-- ws:end:WikiTextCodeRule:11 --><br>
Other handy meta-schemes in Weka:<br>
<ul><li><tt><a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.dev/weka/clusterers/FilteredClusterer.html" rel="nofollow">weka.clusterers.FilteredClusterer</a></tt> (since 3.5.4)</li><li><tt><a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.dev/weka/associations/FilteredAssociator.html" rel="nofollow">weka.associations.FilteredAssociator</a></tt> (since 3.5.6)</li></ul><br>
<!-- ws:start:WikiTextHeadingRule:51:&lt;h2&gt; --><h2 id="toc8"><a name="Filter-Batch filtering"></a><!-- ws:end:WikiTextHeadingRule:51 -->Batch filtering</h2>
 On the command line, you can enable a second input/output pair (via <tt>-r</tt> and <tt>-s</tt>) with the <tt>-b</tt>
 option, in order to process the second file with the same filter setup 
as the first one. Necessary, if you're using attribute selection or 
standardization - otherwise you end up with incompatible datasets. This 
is done fairly easy, since one initializes the filter only once with the
 <tt>setInputFormat(Instances)</tt> method, namely with the training set, and then applies the filter subsequently to the training set <em>and</em> the test set. The following example shows how to apply the <tt>Standardize</tt> filter to a train and a test set.<br>
<!-- ws:start:WikiTextCodeRule:12:
&lt;pre class=&quot;java&quot;&gt; Instances train = ...   // from somewhere&lt;br/&gt; Instances test = ...    // from somewhere&lt;br/&gt; Standardize filter = new Standardize();&lt;br/&gt; filter.setInputFormat(train);  // initializing the filter once with training set&lt;br/&gt; Instances newTrain = Filter.useFilter(train, filter);  // configures the Filter based on train instances and returns filtered instances&lt;br/&gt; Instances newTest = Filter.useFilter(test, filter);    // create new test set&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> Instances train <span class="sy0">=</span> ...   <span class="co1">// from somewhere</span>
 Instances test <span class="sy0">=</span> ...    <span class="co1">// from somewhere</span>
 Standardize filter <span class="sy0">=</span> <span class="kw1">new</span> Standardize<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 filter.<span class="me1">setInputFormat</span><span class="br0">(</span>train<span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// initializing the filter once with training set</span>
 Instances newTrain <span class="sy0">=</span> Filter.<span class="me1">useFilter</span><span class="br0">(</span>train, filter<span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// configures the Filter based on train instances and returns filtered instances</span>
 Instances newTest <span class="sy0">=</span> Filter.<span class="me1">useFilter</span><span class="br0">(</span>test, filter<span class="br0">)</span><span class="sy0">;</span>    <span class="co1">// create new test set</span></pre>

<!-- ws:end:WikiTextCodeRule:12 --><br>
<!-- ws:start:WikiTextHeadingRule:53:&lt;h2&gt; --><h2 id="toc9"><a name="Filter-Calling conventions"></a><!-- ws:end:WikiTextHeadingRule:53 -->Calling conventions</h2>
 The <tt>setInputFormat(Instances)</tt> method <strong>always</strong> has to be the last call before the filter is applied, e.g., with <tt>Filter.useFilter(Instances,Filter)</tt>. <em>Why?</em> First, it is the convention for using filters and, secondly, lots of filters generate the header of the output format in the <tt>setInputFormat(Instances)</tt> method with the currently set options (setting otpions <em>after</em> this call doesn't have any effect any more).<br>
<br>
<!-- ws:start:WikiTextHeadingRule:55:&lt;h1&gt; --><h1 id="toc10"><a name="Classification"></a><!-- ws:end:WikiTextHeadingRule:55 -->Classification</h1>
 The necessary classes can be found in this package:<br>
<!-- ws:start:WikiTextCodeRule:13:
&lt;pre class=&quot;java&quot;&gt; weka.classifiers&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> weka.<span class="me1">classifiers</span></pre>

<!-- ws:end:WikiTextCodeRule:13 --><br>
<!-- ws:start:WikiTextHeadingRule:57:&lt;h2&gt; --><h2 id="toc11"><a name="Classification-Building a Classifier"></a><!-- ws:end:WikiTextHeadingRule:57 -->Building a Classifier</h2>
 <!-- ws:start:WikiTextHeadingRule:59:&lt;h3&gt; --><h3 id="toc12"><a name="Classification-Building a Classifier-Batch"></a><!-- ws:end:WikiTextHeadingRule:59 -->Batch</h3>
 A Weka classifier is rather simple to train on a given dataset. E.g., 
we can train an unpruned C4.5 tree algorithm on a given dataset <em>data</em>. The training is done via the <tt>buildClassifier(Instances)</tt> method.<br>
<!-- ws:start:WikiTextCodeRule:14:
&lt;pre class=&quot;java&quot;&gt; import weka.classifiers.trees.J48;&lt;br/&gt; ...&lt;br/&gt; String[] options = new String[1];&lt;br/&gt; options[0] = &amp;quot;-U&amp;quot;;            // unpruned tree&lt;br/&gt; J48 tree = new J48();         // new instance of tree&lt;br/&gt; tree.setOptions(options);     // set the options&lt;br/&gt; tree.buildClassifier(data);   // build classifier&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.classifiers.trees.J48</span><span class="sy0">;</span>
 ...
 <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"-U"</span><span class="sy0">;</span>            <span class="co1">// unpruned tree</span>
 J48 tree <span class="sy0">=</span> <span class="kw1">new</span> J48<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>         <span class="co1">// new instance of tree</span>
 tree.<span class="me1">setOptions</span><span class="br0">(</span>options<span class="br0">)</span><span class="sy0">;</span>     <span class="co1">// set the options</span>
 tree.<span class="me1">buildClassifier</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>   <span class="co1">// build classifier</span></pre>

<!-- ws:end:WikiTextCodeRule:14 --><br>
<!-- ws:start:WikiTextHeadingRule:61:&lt;h3&gt; --><h3 id="toc13"><a name="Classification-Building a Classifier-Incremental"></a><!-- ws:end:WikiTextHeadingRule:61 -->Incremental</h3>
 Classifiers implementing the <tt>weka.classifiers.UpdateableClassifier</tt>
 interface can be trained incrementally. This conserves memory, since 
the data doesn't have to be loaded into memory all at once. See the 
Javadoc of this interface to see what classifiers are implementing it.<br>
<br>
The actual process of training an incremental classifier is fairly simple:<br>
<ul><li>Call <tt>buildClassifier(Instances)</tt> with the structure of the dataset (may or may not contain any actual data rows).</li><li>Subsequently call the <tt>updateClassifier(Instance)</tt> method to feed the classifier new <tt>weka.core.Instance</tt> objects, one by one.</li></ul><br>
Here is an example using data from a <tt>weka.core.converters.ArffLoader</tt> to train <tt>weka.classifiers.bayes.NaiveBayesUpdateable</tt>:<br>
<!-- ws:start:WikiTextCodeRule:15:
&lt;pre class=&quot;java&quot;&gt; // load data&lt;br/&gt; ArffLoader loader = new ArffLoader();&lt;br/&gt; loader.setFile(new File(&amp;quot;/some/where/data.arff&amp;quot;));&lt;br/&gt; Instances structure = loader.getStructure();&lt;br/&gt; structure.setClassIndex(structure.numAttributes() - 1);&lt;br/&gt;&lt;br/&gt; // train NaiveBayes&lt;br/&gt; NaiveBayesUpdateable nb = new NaiveBayesUpdateable();&lt;br/&gt; nb.buildClassifier(structure);&lt;br/&gt; Instance current;&lt;br/&gt; while ((current = loader.getNextInstance(structure)) != null)&lt;br/&gt;   nb.updateClassifier(current);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="co1">// load data</span>
 ArffLoader loader <span class="sy0">=</span> <span class="kw1">new</span> ArffLoader<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 loader.<span class="me1">setFile</span><span class="br0">(</span><span class="kw1">new</span> <span class="kw3">File</span><span class="br0">(</span><span class="st0">"/some/where/data.arff"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 Instances structure <span class="sy0">=</span> loader.<span class="me1">getStructure</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 structure.<span class="me1">setClassIndex</span><span class="br0">(</span>structure.<span class="me1">numAttributes</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
 <span class="co1">// train NaiveBayes</span>
 NaiveBayesUpdateable nb <span class="sy0">=</span> <span class="kw1">new</span> NaiveBayesUpdateable<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 nb.<span class="me1">buildClassifier</span><span class="br0">(</span>structure<span class="br0">)</span><span class="sy0">;</span>
 Instance current<span class="sy0">;</span>
 <span class="kw1">while</span> <span class="br0">(</span><span class="br0">(</span>current <span class="sy0">=</span> loader.<span class="me1">getNextInstance</span><span class="br0">(</span>structure<span class="br0">)</span><span class="br0">)</span> <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">)</span>
   nb.<span class="me1">updateClassifier</span><span class="br0">(</span>current<span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:15 --><br>
A working example is <!-- ws:start:WikiTextFileRule:330:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/IncrementalClassifier.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@IncrementalClassifier.java&quot; title=&quot;File: IncrementalClassifier.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="IncrementalClassifier.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java');" class="filename" title="IncrementalClassifier.java">IncrementalClassifier.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/IncrementalClassifier.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java">Download</a></li><li class="grey">1 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:330 -->.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:63:&lt;h2&gt; --><h2 id="toc14"><a name="Classification-Evaluating"></a><!-- ws:end:WikiTextHeadingRule:63 -->Evaluating</h2>
 <!-- ws:start:WikiTextHeadingRule:65:&lt;h2&gt; --><h2 id="toc15"><a name="Classification-Cross-validation"></a><!-- ws:end:WikiTextHeadingRule:65 -->Cross-validation</h2>
 If you only have a training set and no test you might want to evaluate 
the classifier by using 10 times 10-fold cross-validation. This can be 
easily done via the <tt>Evaluation</tt> class. Here we <em>seed</em> the random selection of our folds for the CV with <em>1</em>. Check out the <tt>Evaluation</tt> class for more information about the statistics it produces.<br>
<!-- ws:start:WikiTextCodeRule:16:
&lt;pre class=&quot;java&quot;&gt; import weka.classifiers.Evaluation;&lt;br/&gt; import java.util.Random;&lt;br/&gt; ...&lt;br/&gt; Evaluation eval = new Evaluation(newData);&lt;br/&gt; eval.crossValidateModel(tree, newData, 10, new Random(1));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.classifiers.Evaluation</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.util.Random</span><span class="sy0">;</span>
 ...
 <span class="me1">Evaluation</span> eval <span class="sy0">=</span> <span class="kw1">new</span> Evaluation<span class="br0">(</span>newData<span class="br0">)</span><span class="sy0">;</span>
 eval.<span class="me1">crossValidateModel</span><span class="br0">(</span>tree, newData, <span class="nu0">10</span>, <span class="kw1">new</span> <span class="kw3">Random</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:16 --><br>
<strong>Note:</strong> The classifier (in our example <em>tree</em>) should not be trained when handed over to the <tt>crossValidateModel</tt> method. <strong>Why?</strong> If the classifier does not abide to the Weka convention that a classifier must be re-initialized every time the <tt>buildClassifier</tt> method is called (in other words: subsequent calls to the <tt>buildClassifier</tt> method always return the same results), you will get inconsistent and worthless results. The <tt>crossValidateModel</tt> takes care of training and evaluating the classifier. (It creates a copy of the original classifier that you hand over to the <tt>crossValidateModel</tt> for each run of the cross-validation.)<br>
<br>
<!-- ws:start:WikiTextHeadingRule:67:&lt;h2&gt; --><h2 id="toc16"><a name="Classification-Train/test set"></a><!-- ws:end:WikiTextHeadingRule:67 -->Train/test set</h2>
 In case you have a dedicated test set, you can train the classifier and
 then evaluate it on this test set. In the following example, a J48 is 
instantiated, trained and then evaluated. Some statistics are printed to
 <tt>stdout</tt>:<br>
<!-- ws:start:WikiTextCodeRule:17:
&lt;pre class=&quot;java&quot;&gt; import weka.core.Instances;&lt;br/&gt; import weka.classifiers.Evaluation;&lt;br/&gt; import weka.classifiers.trees.J48;&lt;br/&gt; ...&lt;br/&gt; Instances train = ...   // from somewhere&lt;br/&gt; Instances test = ...    // from somewhere&lt;br/&gt; // train classifier&lt;br/&gt; Classifier cls = new J48();&lt;br/&gt; cls.buildClassifier(train);&lt;br/&gt; // evaluate classifier and print some statistics&lt;br/&gt; Evaluation eval = new Evaluation(train);&lt;br/&gt; eval.evaluateModel(cls, test);&lt;br/&gt; System.out.println(eval.toSummaryString(&amp;quot;\nResults\n======\n&amp;quot;, false));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.core.Instances</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.classifiers.Evaluation</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.classifiers.trees.J48</span><span class="sy0">;</span>
 ...
 <span class="me1">Instances</span> train <span class="sy0">=</span> ...   <span class="co1">// from somewhere</span>
 Instances test <span class="sy0">=</span> ...    <span class="co1">// from somewhere</span>
 <span class="co1">// train classifier</span>
 Classifier cls <span class="sy0">=</span> <span class="kw1">new</span> J48<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 cls.<span class="me1">buildClassifier</span><span class="br0">(</span>train<span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// evaluate classifier and print some statistics</span>
 Evaluation eval <span class="sy0">=</span> <span class="kw1">new</span> Evaluation<span class="br0">(</span>train<span class="br0">)</span><span class="sy0">;</span>
 eval.<span class="me1">evaluateModel</span><span class="br0">(</span>cls, test<span class="br0">)</span><span class="sy0">;</span>
 <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>eval.<span class="me1">toSummaryString</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>Results<span class="es0">\n</span>======<span class="es0">\n</span>"</span>, <span class="kw2">false</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:17 --><br>
<!-- ws:start:WikiTextHeadingRule:69:&lt;h2&gt; --><h2 id="toc17"><a name="Classification-Statistics"></a><!-- ws:end:WikiTextHeadingRule:69 -->Statistics</h2>
 Some methods for retrieving the results from the evaluation:<br>
<ul><li>nominal class<ul><li><tt>correct()</tt> - number of correctly classified instances (see also <tt>incorrect()</tt>)</li><li><tt>pctCorrect()</tt> - percentage of correctly classified instances (see also <tt>pctIncorrect()</tt>)</li><li><tt>kappa()</tt> - Kappa statistics</li></ul></li><li>numeric class<ul><li><tt>correlationCoefficient()</tt> - correlation coefficient</li></ul></li><li>general<ul><li><tt>meanAbsoluteError()</tt> - the mean absolute error</li><li><tt>rootMeanSquaredError()</tt> - the root mean squared error</li><li><tt>unclassified()</tt> - number of unclassified instances</li><li><tt>pctUnclassified()</tt> - percentage of unclassified instances</li></ul></li></ul><br>
If you want to have the exact same behavior as from the command line, use this call:<br>
<!-- ws:start:WikiTextCodeRule:18:
&lt;pre class=&quot;java&quot;&gt; import weka.classifiers.trees.J48;&lt;br/&gt; import weka.classifiers.Evaluation;&lt;br/&gt; ...&lt;br/&gt; String[] options = new String[2];&lt;br/&gt; options[0] = &amp;quot;-t&amp;quot;;&lt;br/&gt; options[1] = &amp;quot;/some/where/somefile.arff&amp;quot;;&lt;br/&gt; System.out.println(Evaluation.evaluateModel(new J48(), options));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.classifiers.trees.J48</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.classifiers.Evaluation</span><span class="sy0">;</span>
 ...
 <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"-t"</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"/some/where/somefile.arff"</span><span class="sy0">;</span>
 <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>Evaluation.<span class="me1">evaluateModel</span><span class="br0">(</span><span class="kw1">new</span> J48<span class="br0">(</span><span class="br0">)</span>, options<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:18 --><br>
<!-- ws:start:WikiTextHeadingRule:71:&lt;h2&gt; --><h2 id="toc18"><a name="Classification-ROC curves/AUC"></a><!-- ws:end:WikiTextHeadingRule:71 -->ROC curves/AUC</h2>
 Since Weka 3.5.1, you can also generate ROC curves/AUC with the 
predictions Weka recorded during testing. You can access these 
predictions via the <tt>predictions()</tt> method of the <tt>Evaluation</tt> class. See the <a class="wiki_link" href="http://weka.wikispaces.com/Generating+ROC+curve">Generating ROC curve</a> article for a full example of how to generate ROC curves.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:73:&lt;h2&gt; --><h2 id="toc19"><a name="Classification-Classifying instances"></a><!-- ws:end:WikiTextHeadingRule:73 -->Classifying instances</h2>
 In case you have an unlabeled dataset that you want to classify with 
your newly trained classifier, you can use the following code snippet. 
It loads the file <tt>/some/where/unlabeled.arff</tt>, uses the previously built classifier <tt>tree</tt> to label the instances, and saves the labeled data as <tt>/some/where/labeled.arff</tt>.<br>
<!-- ws:start:WikiTextCodeRule:19:
&lt;pre class=&quot;java&quot;&gt; import java.io.BufferedReader;&lt;br/&gt; import java.io.BufferedWriter;&lt;br/&gt; import java.io.FileReader;&lt;br/&gt; import java.io.FileWriter;&lt;br/&gt; import weka.core.Instances;&lt;br/&gt; ...&lt;br/&gt; // load unlabeled data&lt;br/&gt; Instances unlabeled = new Instances(&lt;br/&gt;                         new BufferedReader(&lt;br/&gt;                           new FileReader(&amp;quot;/some/where/unlabeled.arff&amp;quot;)));&lt;br/&gt;&lt;br/&gt; // set class attribute&lt;br/&gt; unlabeled.setClassIndex(unlabeled.numAttributes() - 1);&lt;br/&gt;&lt;br/&gt; // create copy&lt;br/&gt; Instances labeled = new Instances(unlabeled);&lt;br/&gt;&lt;br/&gt; // label instances&lt;br/&gt; for (int i = 0; i &amp;lt; unlabeled.numInstances(); i++) {&lt;br/&gt;   double clsLabel = tree.classifyInstance(unlabeled.instance(i));&lt;br/&gt;   labeled.instance(i).setClassValue(clsLabel);&lt;br/&gt; }&lt;br/&gt; // save labeled data&lt;br/&gt; BufferedWriter writer = new BufferedWriter(&lt;br/&gt;                           new FileWriter(&amp;quot;/some/where/labeled.arff&amp;quot;));&lt;br/&gt; writer.write(labeled.toString());&lt;br/&gt; writer.newLine();&lt;br/&gt; writer.flush();&lt;br/&gt; writer.close();&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">java.io.BufferedReader</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.io.BufferedWriter</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.io.FileReader</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.io.FileWriter</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.core.Instances</span><span class="sy0">;</span>
 ...
 <span class="co1">// load unlabeled data</span>
 Instances unlabeled <span class="sy0">=</span> <span class="kw1">new</span> Instances<span class="br0">(</span>
                         <span class="kw1">new</span> <span class="kw3">BufferedReader</span><span class="br0">(</span>
                           <span class="kw1">new</span> <span class="kw3">FileReader</span><span class="br0">(</span><span class="st0">"/some/where/unlabeled.arff"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
 <span class="co1">// set class attribute</span>
 unlabeled.<span class="me1">setClassIndex</span><span class="br0">(</span>unlabeled.<span class="me1">numAttributes</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
 <span class="co1">// create copy</span>
 Instances labeled <span class="sy0">=</span> <span class="kw1">new</span> Instances<span class="br0">(</span>unlabeled<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
 <span class="co1">// label instances</span>
 <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> unlabeled.<span class="me1">numInstances</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
   <span class="kw4">double</span> clsLabel <span class="sy0">=</span> tree.<span class="me1">classifyInstance</span><span class="br0">(</span>unlabeled.<span class="me1">instance</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
   labeled.<span class="me1">instance</span><span class="br0">(</span>i<span class="br0">)</span>.<span class="me1">setClassValue</span><span class="br0">(</span>clsLabel<span class="br0">)</span><span class="sy0">;</span>
 <span class="br0">}</span>
 <span class="co1">// save labeled data</span>
 <span class="kw3">BufferedWriter</span> writer <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">BufferedWriter</span><span class="br0">(</span>
                           <span class="kw1">new</span> <span class="kw3">FileWriter</span><span class="br0">(</span><span class="st0">"/some/where/labeled.arff"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 writer.<span class="me1">write</span><span class="br0">(</span>labeled.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 writer.<span class="me1">newLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 writer.<span class="me1">flush</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 writer.<span class="me1">close</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:19 --><br>
<strong>Note on nominal classes:</strong><br>
<ul><li>If you're interested in the distribution over all the classes, use the method <tt>distributionForInstance(Instance)</tt>. This method returns a double array with the probability for each class.</li><li>The returned double value from <tt>classifyInstance</tt> (or the index in the array returned by <tt>distributionForInstance</tt>)
 is just the index for the string values in the attribute. That is, if 
you want the string representation for the class label returned above <tt>clsLabel</tt>, then you can print it like this:</li></ul><!-- ws:start:WikiTextCodeRule:20:
&lt;pre class=&quot;java&quot;&gt;System.out.println(clsLabel + &amp;quot; -&amp;gt; &amp;quot; + unlabeled.classAttribute().value((int) clsLabel));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"><span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>clsLabel <span class="sy0">+</span> <span class="st0">" -&gt; "</span> <span class="sy0">+</span> unlabeled.<span class="me1">classAttribute</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">value</span><span class="br0">(</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> clsLabel<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:20 --><br>
<!-- ws:start:WikiTextHeadingRule:75:&lt;h1&gt; --><h1 id="toc20"><a name="Clustering"></a><!-- ws:end:WikiTextHeadingRule:75 -->Clustering</h1>
 Clustering is similar to classification. The necessary classes can be found in this package:<br>
<!-- ws:start:WikiTextCodeRule:21:
&lt;pre class=&quot;java&quot;&gt; weka.clusterers&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> weka.<span class="me1">clusterers</span></pre>

<!-- ws:end:WikiTextCodeRule:21 --><br>
<!-- ws:start:WikiTextHeadingRule:77:&lt;h2&gt; --><h2 id="toc21"><a name="Clustering-Building a Clusterer"></a><!-- ws:end:WikiTextHeadingRule:77 -->Building a Clusterer</h2>
 <!-- ws:start:WikiTextHeadingRule:79:&lt;h3&gt; --><h3 id="toc22"><a name="Clustering-Building a Clusterer-Batch"></a><!-- ws:end:WikiTextHeadingRule:79 -->Batch</h3>
 A clusterer is built in much the same way as a classifier, but the <tt>buildClusterer(Instances)</tt> method instead of <tt>buildClassifier(Instances)</tt>. The following code snippet shows how to build an <tt>EM</tt> clusterer with a maximum of <tt>100</tt> iterations.<br>
<!-- ws:start:WikiTextCodeRule:22:
&lt;pre class=&quot;java&quot;&gt; import weka.clusterers.EM;&lt;br/&gt; ...&lt;br/&gt; String[] options = new String[2];&lt;br/&gt; options[0] = &amp;quot;-I&amp;quot;;                 // max. iterations&lt;br/&gt; options[1] = &amp;quot;100&amp;quot;;&lt;br/&gt; EM clusterer = new EM();   // new instance of clusterer&lt;br/&gt; clusterer.setOptions(options);     // set the options&lt;br/&gt; clusterer.buildClusterer(data);    // build the clusterer&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.clusterers.EM</span><span class="sy0">;</span>
 ...
 <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"-I"</span><span class="sy0">;</span>                 <span class="co1">// max. iterations</span>
 options<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"100"</span><span class="sy0">;</span>
 EM clusterer <span class="sy0">=</span> <span class="kw1">new</span> EM<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>   <span class="co1">// new instance of clusterer</span>
 clusterer.<span class="me1">setOptions</span><span class="br0">(</span>options<span class="br0">)</span><span class="sy0">;</span>     <span class="co1">// set the options</span>
 clusterer.<span class="me1">buildClusterer</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>    <span class="co1">// build the clusterer</span></pre>

<!-- ws:end:WikiTextCodeRule:22 --><br>
<!-- ws:start:WikiTextHeadingRule:81:&lt;h3&gt; --><h3 id="toc23"><a name="Clustering-Building a Clusterer-Incremental"></a><!-- ws:end:WikiTextHeadingRule:81 -->Incremental</h3>
 Clusterers implementing the <tt>weka.clusterers.UpdateableClusterer</tt>
 interface can be trained incrementally (available since version 3.5.4).
 This conserves memory, since the data doesn't have to be loaded into 
memory all at once. See the Javadoc for this interface to see which 
clusterers implement it.<br>
<br>
The actual process of training an incremental clusterer is fairly simple:<br>
<ul><li>Call <tt>buildClusterer(Instances)</tt> with the structure of the dataset (may or may not contain any actual data rows).</li><li>Subsequently call the <tt>updateClusterer(Instance)</tt> method to feed the clusterer new <tt>weka.core.Instance</tt> objects, one by one.</li><li>Call <tt>updateFinished()</tt> after all Instance objects have been processed, for the clusterer to perform additional computations.</li></ul><br>
Here is an example using data from a <tt>weka.core.converters.ArffLoader</tt> to train <tt>weka.clusterers.Cobweb</tt>:<br>
<!-- ws:start:WikiTextCodeRule:23:
&lt;pre class=&quot;java&quot;&gt; // load data&lt;br/&gt; ArffLoader loader = new ArffLoader();&lt;br/&gt; loader.setFile(new File(&amp;quot;/some/where/data.arff&amp;quot;));&lt;br/&gt; Instances structure = loader.getStructure();&lt;br/&gt;&lt;br/&gt; // train Cobweb&lt;br/&gt; Cobweb cw = new Cobweb();&lt;br/&gt; cw.buildClusterer(structure);&lt;br/&gt; Instance current;&lt;br/&gt; while ((current = loader.getNextInstance(structure)) != null)&lt;br/&gt;   cw.updateClusterer(current);&lt;br/&gt; cw.updateFinished();&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="co1">// load data</span>
 ArffLoader loader <span class="sy0">=</span> <span class="kw1">new</span> ArffLoader<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 loader.<span class="me1">setFile</span><span class="br0">(</span><span class="kw1">new</span> <span class="kw3">File</span><span class="br0">(</span><span class="st0">"/some/where/data.arff"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 Instances structure <span class="sy0">=</span> loader.<span class="me1">getStructure</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
 <span class="co1">// train Cobweb</span>
 Cobweb cw <span class="sy0">=</span> <span class="kw1">new</span> Cobweb<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 cw.<span class="me1">buildClusterer</span><span class="br0">(</span>structure<span class="br0">)</span><span class="sy0">;</span>
 Instance current<span class="sy0">;</span>
 <span class="kw1">while</span> <span class="br0">(</span><span class="br0">(</span>current <span class="sy0">=</span> loader.<span class="me1">getNextInstance</span><span class="br0">(</span>structure<span class="br0">)</span><span class="br0">)</span> <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">)</span>
   cw.<span class="me1">updateClusterer</span><span class="br0">(</span>current<span class="br0">)</span><span class="sy0">;</span>
 cw.<span class="me1">updateFinished</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:23 --><br>
A working example is <!-- ws:start:WikiTextFileRule:331:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/IncrementalClusterer.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@IncrementalClusterer.java&quot; title=&quot;File: IncrementalClusterer.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="IncrementalClusterer.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java');" class="filename" title="IncrementalClusterer.java">IncrementalClusterer.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/IncrementalClusterer.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java">Download</a></li><li class="grey">1 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:331 -->.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:83:&lt;h2&gt; --><h2 id="toc24"><a name="Clustering-Evaluating"></a><!-- ws:end:WikiTextHeadingRule:83 -->Evaluating</h2>
 For evaluating a clusterer, you can use the <tt>ClusterEvaluation</tt> class. In this example, the number of clusters found is written to output:<br>
<!-- ws:start:WikiTextCodeRule:24:
&lt;pre class=&quot;java&quot;&gt; import weka.clusterers.ClusterEvaluation;&lt;br/&gt; import weka.clusterers.Clusterer;&lt;br/&gt; ...&lt;br/&gt; ClusterEvaluation eval = new ClusterEvaluation();&lt;br/&gt; Clusterer clusterer = new EM();                                 // new clusterer instance, default options&lt;br/&gt; clusterer.buildClusterer(data);                                 // build clusterer&lt;br/&gt; eval.setClusterer(clusterer);                                   // the cluster to evaluate&lt;br/&gt; eval.evaluateClusterer(newData);                                // data to evaluate the clusterer on&lt;br/&gt; System.out.println(&amp;quot;# of clusters: &amp;quot; + eval.getNumClusters());  // output # of clusters&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.clusterers.ClusterEvaluation</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.clusterers.Clusterer</span><span class="sy0">;</span>
 ...
 <span class="me1">ClusterEvaluation</span> eval <span class="sy0">=</span> <span class="kw1">new</span> ClusterEvaluation<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 Clusterer clusterer <span class="sy0">=</span> <span class="kw1">new</span> EM<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>                                 <span class="co1">// new clusterer instance, default options</span>
 clusterer.<span class="me1">buildClusterer</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>                                 <span class="co1">// build clusterer</span>
 eval.<span class="me1">setClusterer</span><span class="br0">(</span>clusterer<span class="br0">)</span><span class="sy0">;</span>                                   <span class="co1">// the cluster to evaluate</span>
 eval.<span class="me1">evaluateClusterer</span><span class="br0">(</span>newData<span class="br0">)</span><span class="sy0">;</span>                                <span class="co1">// data to evaluate the clusterer on</span>
 <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"# of clusters: "</span> <span class="sy0">+</span> eval.<span class="me1">getNumClusters</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// output # of clusters</span></pre>

<!-- ws:end:WikiTextCodeRule:24 --><br>
Or, in the case of <a class="wiki_link_ext" href="http://weka.sourceforge.net/doc/weka/clusterers/DensityBasedClusterer.html" rel="nofollow">density based clusters</a>, you can cross-validate the clusterer (Note: with <a class="wiki_link_ext" href="http://weka.sourceforge.net/doc/weka/clusterers/MakeDensityBasedClusterer.html" rel="nofollow">MakeDensityBasedClusterer</a> you can turn any clusterer into a density-based one):<br>
<!-- ws:start:WikiTextCodeRule:25:
&lt;pre class=&quot;java&quot;&gt; import weka.clusterers.ClusterEvaluation;&lt;br/&gt; import weka.clusterers.DensityBasedClusterer;&lt;br/&gt; import weka.core.Instances;&lt;br/&gt; import java.util.Random;&lt;br/&gt; ...&lt;br/&gt; Instances data = ...                                     // from somewhere&lt;br/&gt; DensityBasedClusterer clusterer = new ...                // the clusterer to evaluate&lt;br/&gt; double logLikelyhood =&lt;br/&gt;    ClusterEvaluation.crossValidateModel(                 // cross-validate&lt;br/&gt;    clusterer, data, 10,                                  // with 10 folds&lt;br/&gt;    new Random(1));                                       // and random number generator with seed 1&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.clusterers.ClusterEvaluation</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.clusterers.DensityBasedClusterer</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.core.Instances</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">java.util.Random</span><span class="sy0">;</span>
 ...
 <span class="me1">Instances</span> data <span class="sy0">=</span> ...                                     <span class="co1">// from somewhere</span>
 DensityBasedClusterer clusterer <span class="sy0">=</span> <span class="kw1">new</span> ...                <span class="co1">// the clusterer to evaluate</span>
 <span class="kw4">double</span> logLikelyhood <span class="sy0">=</span>
    ClusterEvaluation.<span class="me1">crossValidateModel</span><span class="br0">(</span>                 <span class="co1">// cross-validate</span>
    clusterer, data, <span class="nu0">10</span>,                                  <span class="co1">// with 10 folds</span>
    <span class="kw1">new</span> <span class="kw3">Random</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>                                       <span class="co1">// and random number generator with seed 1</span></pre>

<!-- ws:end:WikiTextCodeRule:25 --><br>
Or, if you want the same behavior/print-out from command line, use this call:<br>
<!-- ws:start:WikiTextCodeRule:26:
&lt;pre class=&quot;java&quot;&gt; import weka.clusterers.EM;&lt;br/&gt; import weka.clusterers.ClusterEvaluation;&lt;br/&gt; ...&lt;br/&gt; String[] options = new String[2];&lt;br/&gt; options[0] = &amp;quot;-t&amp;quot;;&lt;br/&gt; options[1] = &amp;quot;/some/where/somefile.arff&amp;quot;;&lt;br/&gt; System.out.println(ClusterEvaluation.evaluateClusterer(new EM(), options));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw1">import</span> <span class="co2">weka.clusterers.EM</span><span class="sy0">;</span>
 <span class="kw1">import</span> <span class="co2">weka.clusterers.ClusterEvaluation</span><span class="sy0">;</span>
 ...
 <span class="kw3">String</span><span class="br0">[</span><span class="br0">]</span> options <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"-t"</span><span class="sy0">;</span>
 options<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"/some/where/somefile.arff"</span><span class="sy0">;</span>
 <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>ClusterEvaluation.<span class="me1">evaluateClusterer</span><span class="br0">(</span><span class="kw1">new</span> EM<span class="br0">(</span><span class="br0">)</span>, options<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:26 --><br>
<!-- ws:start:WikiTextHeadingRule:85:&lt;h2&gt; --><h2 id="toc25"><a name="Clustering-Clustering instances"></a><!-- ws:end:WikiTextHeadingRule:85 -->Clustering instances</h2>
 The only difference with regard to classification is the method name. Instead of <tt>classifyInstance(Instance)</tt>, it is now <tt>clusterInstance(Instance)</tt>. The method for obtaining the distribution is still the same, i.e., <tt>distributionForInstance(Instance)</tt>.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:87:&lt;h2&gt; --><h2 id="toc26"><a name="Clustering-Classes to clusters evaluation"></a><!-- ws:end:WikiTextHeadingRule:87 -->Classes to clusters evaluation</h2>
 If your data contains a class attribute and you want to check how well 
the generated clusters fit the classes, you can perform a so-called <em>classes to clusters</em>
 evaluation. The Weka Explorer offers this functionality, and it's quite
 easy to implement. These are the necessary steps (complete source code:
 <!-- ws:start:WikiTextFileRule:332:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/ClassesToClusters.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@ClassesToClusters.java&quot; title=&quot;File: ClassesToClusters.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java" onclick="ws.common.trackFileLink('/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="ClassesToClusters.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java" onclick="ws.common.trackFileLink('/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java');" class="filename" title="ClassesToClusters.java">ClassesToClusters.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/ClassesToClusters.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java">Download</a></li><li class="grey">2 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:332 -->):<br>
<ul><li>load the data and set the class attribute</li></ul><!-- ws:start:WikiTextCodeRule:27:
&lt;pre class=&quot;java&quot;&gt; Instances data = new Instances(new BufferedReader(new FileReader(&amp;quot;/some/where/file.arff&amp;quot;)));&lt;br/&gt; data.setClassIndex(data.numAttributes() - 1);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> Instances data <span class="sy0">=</span> <span class="kw1">new</span> Instances<span class="br0">(</span><span class="kw1">new</span> <span class="kw3">BufferedReader</span><span class="br0">(</span><span class="kw1">new</span> <span class="kw3">FileReader</span><span class="br0">(</span><span class="st0">"/some/where/file.arff"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 data.<span class="me1">setClassIndex</span><span class="br0">(</span>data.<span class="me1">numAttributes</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:27 --><ul><li>generate the <em>class-less</em> data to train the clusterer with</li></ul><!-- ws:start:WikiTextCodeRule:28:
&lt;pre class=&quot;java&quot;&gt; weka.filters.unsupervised.attribute.Remove filter = new weka.filters.unsupervised.attribute.Remove();&lt;br/&gt; filter.setAttributeIndices(&amp;quot;&amp;quot; + (data.classIndex() + 1));&lt;br/&gt; filter.setInputFormat(data);&lt;br/&gt; Instances dataClusterer = Filter.useFilter(data, filter);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> weka.<span class="me1">filters</span>.<span class="me1">unsupervised</span>.<span class="me1">attribute</span>.<span class="me1">Remove</span> filter <span class="sy0">=</span> <span class="kw1">new</span> weka.<span class="me1">filters</span>.<span class="me1">unsupervised</span>.<span class="me1">attribute</span>.<span class="me1">Remove</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 filter.<span class="me1">setAttributeIndices</span><span class="br0">(</span><span class="st0">""</span> <span class="sy0">+</span> <span class="br0">(</span>data.<span class="me1">classIndex</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 filter.<span class="me1">setInputFormat</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>
 Instances dataClusterer <span class="sy0">=</span> Filter.<span class="me1">useFilter</span><span class="br0">(</span>data, filter<span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:28 --><ul><li>train the clusterer, e.g., <tt>EM</tt></li></ul><!-- ws:start:WikiTextCodeRule:29:
&lt;pre class=&quot;java&quot;&gt; EM clusterer = new EM();&lt;br/&gt; // set further options for EM, if necessary...&lt;br/&gt; clusterer.buildClusterer(dataClusterer);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> EM clusterer <span class="sy0">=</span> <span class="kw1">new</span> EM<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="co1">// set further options for EM, if necessary...</span>
 clusterer.<span class="me1">buildClusterer</span><span class="br0">(</span>dataClusterer<span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:29 --><ul><li>evaluate the clusterer with the data still containing the class attribute</li></ul><!-- ws:start:WikiTextCodeRule:30:
&lt;pre class=&quot;java&quot;&gt; ClusterEvaluation eval = new ClusterEvaluation();&lt;br/&gt; eval.setClusterer(clusterer);&lt;br/&gt; eval.evaluateClusterer(data);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> ClusterEvaluation eval <span class="sy0">=</span> <span class="kw1">new</span> ClusterEvaluation<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
 eval.<span class="me1">setClusterer</span><span class="br0">(</span>clusterer<span class="br0">)</span><span class="sy0">;</span>
 eval.<span class="me1">evaluateClusterer</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:30 --><ul><li>print the results of the evaluation to <em>stdout</em></li></ul><!-- ws:start:WikiTextCodeRule:31:
&lt;pre class=&quot;java&quot;&gt; System.out.println(eval.clusterResultsToString());&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java"> <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>eval.<span class="me1">clusterResultsToString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:31 --><br>
<!-- ws:start:WikiTextHeadingRule:89:&lt;h1&gt; --><h1 id="toc27"><a name="Attribute selection"></a><!-- ws:end:WikiTextHeadingRule:89 -->Attribute selection</h1>
 There is no real need to use the attribute selection classes directly 
in your own code, since there are already a meta-classifier and a filter
 available for applying attribute selection, but the low-level approach 
is still listed for the sake of completeness. The following examples all
 use <tt>CfsSubsetEval</tt> and <tt>GreedyStepwise</tt> (backwards). The code listed below is taken from the <!-- ws:start:WikiTextFileRule:333:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/AttributeSelectionTest.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@AttributeSelectionTest.java&quot; title=&quot;File: AttributeSelectionTest.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java" onclick="ws.common.trackFileLink('/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="AttributeSelectionTest.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java" onclick="ws.common.trackFileLink('/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java');" class="filename" title="AttributeSelectionTest.java">AttributeSelectionTest.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/AttributeSelectionTest.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java">Download</a></li><li class="grey">3 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:333 -->.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:91:&lt;h2&gt; --><h2 id="toc28"><a name="Attribute selection-Meta-Classifier"></a><!-- ws:end:WikiTextHeadingRule:91 -->Meta-Classifier</h2>
 The following meta-classifier performs a preprocessing step of 
attribute selection before the data gets presented to the base 
classifier (in the example here, this is <tt>J48</tt>).<br>
<!-- ws:start:WikiTextCodeRule:32:
&lt;pre class=&quot;java&quot;&gt;  Instances data = ...  // from somewhere&lt;br/&gt;  AttributeSelectedClassifier classifier = new AttributeSelectedClassifier();&lt;br/&gt;  CfsSubsetEval eval = new CfsSubsetEval();&lt;br/&gt;  GreedyStepwise search = new GreedyStepwise();&lt;br/&gt;  search.setSearchBackwards(true);&lt;br/&gt;  J48 base = new J48();&lt;br/&gt;  classifier.setClassifier(base);&lt;br/&gt;  classifier.setEvaluator(eval);&lt;br/&gt;  classifier.setSearch(search);&lt;br/&gt;  // 10-fold cross-validation&lt;br/&gt;  Evaluation evaluation = new Evaluation(data);&lt;br/&gt;  evaluation.crossValidateModel(classifier, data, 10, new Random(1));&lt;br/&gt;  System.out.println(evaluation.toSummaryString());&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java">  Instances data <span class="sy0">=</span> ...  <span class="co1">// from somewhere</span>
  AttributeSelectedClassifier classifier <span class="sy0">=</span> <span class="kw1">new</span> AttributeSelectedClassifier<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  CfsSubsetEval eval <span class="sy0">=</span> <span class="kw1">new</span> CfsSubsetEval<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  GreedyStepwise search <span class="sy0">=</span> <span class="kw1">new</span> GreedyStepwise<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  search.<span class="me1">setSearchBackwards</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span><span class="sy0">;</span>
  J48 base <span class="sy0">=</span> <span class="kw1">new</span> J48<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  classifier.<span class="me1">setClassifier</span><span class="br0">(</span>base<span class="br0">)</span><span class="sy0">;</span>
  classifier.<span class="me1">setEvaluator</span><span class="br0">(</span>eval<span class="br0">)</span><span class="sy0">;</span>
  classifier.<span class="me1">setSearch</span><span class="br0">(</span>search<span class="br0">)</span><span class="sy0">;</span>
  <span class="co1">// 10-fold cross-validation</span>
  Evaluation evaluation <span class="sy0">=</span> <span class="kw1">new</span> Evaluation<span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>
  evaluation.<span class="me1">crossValidateModel</span><span class="br0">(</span>classifier, data, <span class="nu0">10</span>, <span class="kw1">new</span> <span class="kw3">Random</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
  <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>evaluation.<span class="me1">toSummaryString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:32 --><br>
<!-- ws:start:WikiTextHeadingRule:93:&lt;h2&gt; --><h2 id="toc29"><a name="Attribute selection-Filter"></a><!-- ws:end:WikiTextHeadingRule:93 -->Filter</h2>
 The filter approach is straightforward: after setting up the filter, 
one just filters the data through the filter and obtains the reduced 
dataset.<br>
<!-- ws:start:WikiTextCodeRule:33:
&lt;pre class=&quot;java&quot;&gt;  Instances data = ...  // from somewhere&lt;br/&gt;  AttributeSelection filter = new AttributeSelection();  // package weka.filters.supervised.attribute!&lt;br/&gt;  CfsSubsetEval eval = new CfsSubsetEval();&lt;br/&gt;  GreedyStepwise search = new GreedyStepwise();&lt;br/&gt;  search.setSearchBackwards(true);&lt;br/&gt;  filter.setEvaluator(eval);&lt;br/&gt;  filter.setSearch(search);&lt;br/&gt;  filter.setInputFormat(data);&lt;br/&gt;  // generate new data&lt;br/&gt;  Instances newData = Filter.useFilter(data, filter);&lt;br/&gt;  System.out.println(newData);&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java">  Instances data <span class="sy0">=</span> ...  <span class="co1">// from somewhere</span>
  AttributeSelection filter <span class="sy0">=</span> <span class="kw1">new</span> AttributeSelection<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// package weka.filters.supervised.attribute!</span>
  CfsSubsetEval eval <span class="sy0">=</span> <span class="kw1">new</span> CfsSubsetEval<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  GreedyStepwise search <span class="sy0">=</span> <span class="kw1">new</span> GreedyStepwise<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  search.<span class="me1">setSearchBackwards</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span><span class="sy0">;</span>
  filter.<span class="me1">setEvaluator</span><span class="br0">(</span>eval<span class="br0">)</span><span class="sy0">;</span>
  filter.<span class="me1">setSearch</span><span class="br0">(</span>search<span class="br0">)</span><span class="sy0">;</span>
  filter.<span class="me1">setInputFormat</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>
  <span class="co1">// generate new data</span>
  Instances newData <span class="sy0">=</span> Filter.<span class="me1">useFilter</span><span class="br0">(</span>data, filter<span class="br0">)</span><span class="sy0">;</span>
  <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>newData<span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:33 --><br>
<!-- ws:start:WikiTextHeadingRule:95:&lt;h2&gt; --><h2 id="toc30"><a name="Attribute selection-Low-level"></a><!-- ws:end:WikiTextHeadingRule:95 -->Low-level</h2>
 If neither the meta-classifier nor filter approach is suitable for your
 purposes, you can use the attribute selection classes themselves.<br>
<!-- ws:start:WikiTextCodeRule:34:
&lt;pre class=&quot;java&quot;&gt;  Instances data = ...  // from somewhere&lt;br/&gt;  AttributeSelection attsel = new AttributeSelection();  // package weka.attributeSelection!&lt;br/&gt;  CfsSubsetEval eval = new CfsSubsetEval();&lt;br/&gt;  GreedyStepwise search = new GreedyStepwise();&lt;br/&gt;  search.setSearchBackwards(true);&lt;br/&gt;  attsel.setEvaluator(eval);&lt;br/&gt;  attsel.setSearch(search);&lt;br/&gt;  attsel.SelectAttributes(data);&lt;br/&gt;  // obtain the attribute indices that were selected&lt;br/&gt;  int[] indices = attsel.selectedAttributes();&lt;br/&gt;  System.out.println(Utils.arrayToString(indices));&lt;/pre&gt;
 -->
<style type="text/css"><!--
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java span.xtra { display:block; }

-->
</style><pre class="java">  Instances data <span class="sy0">=</span> ...  <span class="co1">// from somewhere</span>
  AttributeSelection attsel <span class="sy0">=</span> <span class="kw1">new</span> AttributeSelection<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// package weka.attributeSelection!</span>
  CfsSubsetEval eval <span class="sy0">=</span> <span class="kw1">new</span> CfsSubsetEval<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  GreedyStepwise search <span class="sy0">=</span> <span class="kw1">new</span> GreedyStepwise<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  search.<span class="me1">setSearchBackwards</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span><span class="sy0">;</span>
  attsel.<span class="me1">setEvaluator</span><span class="br0">(</span>eval<span class="br0">)</span><span class="sy0">;</span>
  attsel.<span class="me1">setSearch</span><span class="br0">(</span>search<span class="br0">)</span><span class="sy0">;</span>
  attsel.<span class="me1">SelectAttributes</span><span class="br0">(</span>data<span class="br0">)</span><span class="sy0">;</span>
  <span class="co1">// obtain the attribute indices that were selected</span>
  <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> indices <span class="sy0">=</span> attsel.<span class="me1">selectedAttributes</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
  <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>Utils.<span class="me1">arrayToString</span><span class="br0">(</span>indices<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span></pre>

<!-- ws:end:WikiTextCodeRule:34 --><br>
<!-- ws:start:WikiTextHeadingRule:97:&lt;h1&gt; --><h1 id="toc31"><a name="Note on randomization"></a><!-- ws:end:WikiTextHeadingRule:97 -->Note on randomization</h1>
 Most machine learning schemes, like classifiers and clusterers, are 
susceptible to the ordering of the data. Using a different seed for 
randomizing the data will most likely produce a different result. For 
example, the Explorer, or a classifier/clusterer run from the command 
line, uses only a seeded <tt>java.util.Random</tt> number generator, whereas the <tt>weka.core.Instances.getgetRandomNumberGenerator(int)</tt> (which the <!-- ws:start:WikiTextFileRule:334:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/WekaDemo.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@WekaDemo.java&quot; title=&quot;File: WekaDemo.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/WekaDemo.java/82917303/WekaDemo.java" onclick="ws.common.trackFileLink('/file/view/WekaDemo.java/82917303/WekaDemo.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="WekaDemo.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/WekaDemo.java/82917303/WekaDemo.java" onclick="ws.common.trackFileLink('/file/view/WekaDemo.java/82917303/WekaDemo.java');" class="filename" title="WekaDemo.java">WekaDemo.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/WekaDemo.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/WekaDemo.java/82917303/WekaDemo.java">Download</a></li><li class="grey">6 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:334 -->
 uses) also takes the data into account for seeding. Unless one runs 
10-fold cross-validation 10 times and averages the results, one will 
most likely get different results.<br>
<br>
<!-- ws:start:WikiTextHeadingRule:99:&lt;h1&gt; --><h1 id="toc32"><a name="See also"></a><!-- ws:end:WikiTextHeadingRule:99 -->See also</h1>
 <ul><li><a class="wiki_link" href="http://weka.wikispaces.com/Weka+Examples">Weka Examples</a> - pointer to collection of example classes</li><li><a class="wiki_link" href="http://weka.wikispaces.com/Databases">Databases</a> - for more information about using databases in Weka (includes ODBC, e.g., for MS Access)</li><li><a class="wiki_link" href="http://weka.wikispaces.com/weka_experiment_DatabaseUtils.props">weka/experiment/DatabaseUtils.props</a> - the database setup file</li><li><a class="wiki_link" href="http://weka.wikispaces.com/Generating+cross-validation+folds+%28Java+approach%29">Generating cross-validation folds (Java approach)</a> - in case you want to run 10-fold cross-validation manually</li><li><a class="wiki_link" href="http://weka.wikispaces.com/Generating+classifier+evaluation+output+manually">Generating classifier evaluation output manually</a> - if you want to generate some of the evaluation statistics output manually</li><li><a class="wiki_link" href="http://weka.wikispaces.com/Creating+Instances+on-the-fly">Creating Instances on-the-fly</a> - explains how to generate a <tt>weka.core.Instances</tt> object from scratch</li><li><a class="wiki_link" href="http://weka.wikispaces.com/Save+Instances+to+an+ARFF+File">Save Instances to an ARFF File</a> - shows how to output a dataset</li><li><a class="wiki_link" href="http://weka.wikispaces.com/Using+the+Experiment+API">Using the Experiment API</a></li></ul><br>
<!-- ws:start:WikiTextHeadingRule:101:&lt;h1&gt; --><h1 id="toc33"><a name="Examples"></a><!-- ws:end:WikiTextHeadingRule:101 -->Examples</h1>
 The following are a few sample classes for using various parts of the Weka API:<br>
<ul><li><!-- ws:start:WikiTextFileRule:335:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/WekaDemo.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@WekaDemo.java&quot; title=&quot;File: WekaDemo.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/WekaDemo.java/82917303/WekaDemo.java" onclick="ws.common.trackFileLink('/file/view/WekaDemo.java/82917303/WekaDemo.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="WekaDemo.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/WekaDemo.java/82917303/WekaDemo.java" onclick="ws.common.trackFileLink('/file/view/WekaDemo.java/82917303/WekaDemo.java');" class="filename" title="WekaDemo.java">WekaDemo.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/WekaDemo.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/WekaDemo.java/82917303/WekaDemo.java">Download</a></li><li class="grey">6 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:335 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/classifiers/WekaDemo.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/classifiers/WekaDemo.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/classifiers/WekaDemo.java" rel="nofollow">developer</a>)<br>
little demo class that loads data from a file, runs it through a filter and trains/evaluates a classifier</li><li><!-- ws:start:WikiTextFileRule:336:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/ClusteringDemo.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@ClusteringDemo.java&quot; title=&quot;File: ClusteringDemo.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/ClusteringDemo.java/82916731/ClusteringDemo.java" onclick="ws.common.trackFileLink('/file/view/ClusteringDemo.java/82916731/ClusteringDemo.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="ClusteringDemo.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/ClusteringDemo.java/82916731/ClusteringDemo.java" onclick="ws.common.trackFileLink('/file/view/ClusteringDemo.java/82916731/ClusteringDemo.java');" class="filename" title="ClusteringDemo.java">ClusteringDemo.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/ClusteringDemo.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/ClusteringDemo.java/82916731/ClusteringDemo.java">Download</a></li><li class="grey">2 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:336 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/clusterers/ClusteringDemo.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/clusterers/ClusteringDemo.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/clusterers/ClusteringDemo.java" rel="nofollow">developer</a>)<br>
a basic example for using the clusterer API</li><li><!-- ws:start:WikiTextFileRule:337:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/ClassesToClusters.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@ClassesToClusters.java&quot; title=&quot;File: ClassesToClusters.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java" onclick="ws.common.trackFileLink('/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="ClassesToClusters.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java" onclick="ws.common.trackFileLink('/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java');" class="filename" title="ClassesToClusters.java">ClassesToClusters.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/ClassesToClusters.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/ClassesToClusters.java/82916719/ClassesToClusters.java">Download</a></li><li class="grey">2 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:337 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/clusterers/ClusteringDemo.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/clusterers/ClassesToClusters.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/clusterers/ClassesToClusters.java" rel="nofollow">developer</a>)<br>
performs a <em>classes to clusters</em> evaluation like in the Explorer</li><li><!-- ws:start:WikiTextFileRule:338:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/AttributeSelectionTest.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@AttributeSelectionTest.java&quot; title=&quot;File: AttributeSelectionTest.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java" onclick="ws.common.trackFileLink('/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="AttributeSelectionTest.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java" onclick="ws.common.trackFileLink('/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java');" class="filename" title="AttributeSelectionTest.java">AttributeSelectionTest.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/AttributeSelectionTest.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/AttributeSelectionTest.java/82916697/AttributeSelectionTest.java">Download</a></li><li class="grey">3 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:338 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/attributeSelection/AttributeSelectionTest.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/attributeSelection/AttributeSelectionTest.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/attributeSelection/AttributeSelectionTest.java" rel="nofollow">developer</a>)<br>
example code for using the attribute selection API</li><li><!-- ws:start:WikiTextFileRule:339:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/M5PExample.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@M5PExample.java&quot; title=&quot;File: M5PExample.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/M5PExample.java/82917117/M5PExample.java" onclick="ws.common.trackFileLink('/file/view/M5PExample.java/82917117/M5PExample.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="M5PExample.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/M5PExample.java/82917117/M5PExample.java" onclick="ws.common.trackFileLink('/file/view/M5PExample.java/82917117/M5PExample.java');" class="filename" title="M5PExample.java">M5PExample.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/M5PExample.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/M5PExample.java/82917117/M5PExample.java">Download</a></li><li class="grey">4 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:339 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/classifiers/M5PExample.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/classifiers/M5PExample.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/classifiers/M5PExample.java" rel="nofollow">developer</a>)<br>
example using M5P to obtain data from database, train model, serialize 
it to a file, and use this serialized model to make predictions again.</li><li><!-- ws:start:WikiTextFileRule:340:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/OptionsToCode.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@OptionsToCode.java&quot; title=&quot;File: OptionsToCode.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/OptionsToCode.java/82917163/OptionsToCode.java" onclick="ws.common.trackFileLink('/file/view/OptionsToCode.java/82917163/OptionsToCode.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="OptionsToCode.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/OptionsToCode.java/82917163/OptionsToCode.java" onclick="ws.common.trackFileLink('/file/view/OptionsToCode.java/82917163/OptionsToCode.java');" class="filename" title="OptionsToCode.java">OptionsToCode.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/OptionsToCode.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/OptionsToCode.java/82917163/OptionsToCode.java">Download</a></li><li class="grey">2 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:340 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/core/OptionsToCode.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/core/OptionsToCode.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/core/OptionsToCode.java" rel="nofollow">developer</a>)<br>
turns a Weka command line for a scheme with options into Java code, correctly escaping quotes and backslashes.</li><li><!-- ws:start:WikiTextFileRule:341:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/OptionTree.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@OptionTree.java&quot; title=&quot;File: OptionTree.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/OptionTree.java/82917165/OptionTree.java" onclick="ws.common.trackFileLink('/file/view/OptionTree.java/82917165/OptionTree.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/x-c.png" alt="OptionTree.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/OptionTree.java/82917165/OptionTree.java" onclick="ws.common.trackFileLink('/file/view/OptionTree.java/82917165/OptionTree.java');" class="filename" title="OptionTree.java">OptionTree.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/OptionTree.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/OptionTree.java/82917165/OptionTree.java">Download</a></li><li class="grey">8 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:341 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/gui/OptionTree.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/gui/OptionTree.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/gui/OptionTree.java" rel="nofollow">developer</a>)<br>
displays nested Weka options as tree.</li><li><!-- ws:start:WikiTextFileRule:342:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/IncrementalClassifier.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@IncrementalClassifier.java&quot; title=&quot;File: IncrementalClassifier.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="IncrementalClassifier.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java');" class="filename" title="IncrementalClassifier.java">IncrementalClassifier.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/IncrementalClassifier.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/IncrementalClassifier.java/82917091/IncrementalClassifier.java">Download</a></li><li class="grey">1 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:342 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/book2ndEd-branch/wekaexamples/src/main/java/wekaexamples/classifiers/IncrementalClassifier.java" rel="nofollow">book</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/classifiers/IncrementalClassifier.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/classifiers/IncrementalClassifier.java" rel="nofollow">developer</a>)<br>
Example class for how to train an incremental classifier (in this case, <tt>weka.classifiers.bayes.NaiveBayesUpdateable</tt>).</li><li><!-- ws:start:WikiTextFileRule:343:&lt;img src=&quot;http://www.wikispaces.com/site/embedthumbnail/file/IncrementalClusterer.java?h=52&amp;w=320&quot; class=&quot;WikiFile&quot; id=&quot;wikitext@@file@@IncrementalClusterer.java&quot; title=&quot;File: IncrementalClusterer.java&quot; width=&quot;320&quot; height=&quot;52&quot; /&gt; --><div class="objectEmbed"><a href="http://weka.wikispaces.com/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java');"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/empty.png" alt="IncrementalClusterer.java" height="32" width="32"></a><div><a href="http://weka.wikispaces.com/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java" onclick="ws.common.trackFileLink('/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java');" class="filename" title="IncrementalClusterer.java">IncrementalClusterer.java</a><br><ul><li><a href="http://weka.wikispaces.com/file/detail/IncrementalClusterer.java">Details</a></li><li><a href="http://weka.wikispaces.com/file/view/IncrementalClusterer.java/82917093/IncrementalClusterer.java">Download</a></li><li class="grey">1 KB</li></ul></div></div><!-- ws:end:WikiTextFileRule:343 --> (<a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/branches/stable-3-6/wekaexamples/src/main/java/wekaexamples/clusterers/IncrementalClusterer.java" rel="nofollow">stable-3.6</a>, <a class="wiki_link_ext" href="https://svn.cms.waikato.ac.nz/svn/weka/trunk/wekaexamples/src/main/java/wekaexamples/clusterers/IncrementalClusterer.java" rel="nofollow">developer</a>)<br>
Example class for how to train an incremental clusterer (in this case, <tt>weka.clusterers.Cobweb</tt>).</li></ul><br>
<!-- ws:start:WikiTextAnchorRule:142:&lt;img src=&quot;/i/anchor.gif&quot; class=&quot;WikiAnchor&quot; alt=&quot;Anchor&quot; id=&quot;wikitext@@anchor@@Links&quot; title=&quot;Anchor: Links&quot;/&gt; --><a name="Links"></a><!-- ws:end:WikiTextAnchorRule:142 --><br>
<!-- ws:start:WikiTextHeadingRule:103:&lt;h1&gt; --><h1 id="toc34"><a name="Links"></a><!-- ws:end:WikiTextHeadingRule:103 -->Links</h1>
 <ul><li>Weka API<ul><li><a class="wiki_link_ext" href="http://weka.sourceforge.net/doc/" rel="nofollow">Book version</a></li><li><a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.stable/" rel="nofollow">Stable 3.6 version</a></li><li><a class="wiki_link_ext" href="http://weka.sourceforge.net/doc.dev/" rel="nofollow">Developer version</a></li></ul></li></ul>
  </div>

<div id="pageEditor" class="editorWrapper editorLayer">
  <iframe id="target_editor" name="target_editor" src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/blank.htm" style="width:0px;height:0px;border:0"></iframe>
    <form action="/page/edit/Use+WEKA+in+your+Java+code" method="post" class="editorForm" id="editorForm"><input name="wikispacesFormToken" value="3c488fbeefb8003728e054d026fa2ccdb74c00dc" type="hidden"><div class="jovise"><input name="wikispaces_user_id" value="user-1381854942" type="text"></div><div class="wsh"><input name="goto" autocomplete="off" type="text"></div><div class="movkp"><input name="mode" autocomplete="off" type="text"></div><div class="jowic"><input name="version" autocomplete="off" type="text"></div><div class="jowic"><input name="pageComments" autocomplete="off" type="text"></div><div class="jowic"><input name="saveAndContinue" autocomplete="off" type="text"></div><div class="jowic"><input name="comment" autocomplete="off" type="text"></div><div class="wsh"><input name="commentsDisabled" autocomplete="off" type="text"></div><div class="jowic"><input name="contentPresent" autocomplete="off" type="text"></div><div class="mimw"><input name="editorCleanup" autocomplete="off" type="text"></div><div class="jovise"><input name="WikispacesEditorContent" autocomplete="off" type="text"></div><input name="wikispacesASFormToken" value="21ea01630b3ccd1e05a6293f6cf525f93e2e84b1" type="hidden">
    <input title="goto" name="c29c4c61f08764705ad9aca111eefc8abe81ca33" value="" type="hidden">
    <input title="mode" name="b958c09c6b615aadb1636de9c06ceafe37029d17" autocomplete="off" value="visual" type="hidden">
    <input title="version" name="dd953bac0c8929e1e3e19772c2a6aabc04c14752" autocomplete="off" value="398370896" type="hidden">
    <input title="pageComments" name="5dbe5523b774daccf211d0307613a76c459438ef" autocomplete="off" value="" type="hidden">
    <input title="saveAndContinue" name="4ef1d1b1bca2a606350644279584baa6d37a79f6" value="0" type="hidden">
    <input title="comment" name="18a021a2782aeacd0b22a6b458349e0ad3699622" value="" type="hidden">
    <input title="commentsDisabled" name="896a99f1340758020217dbd7ed7b3af8cd6e7ecc" autocomplete="off" value="" type="hidden">
    <input title="contentPresent" name="5fb54e5e1e6519e3a7caabe1c34d66590932f030" autocomplete="off" value="" type="hidden">
    <input title="editorCleanup" name="885305ae7f9c6faa2359a2cf866fabf28fc85a37" autocomplete="off" value="" type="hidden">

    <textarea id="wsMainEditor" title="content" class="noContentHide" name="8fa86ef5c1cf3db675e7d12c8820ced303d2ce7f" style="width: 100%; height: 400px; position: absolute; top: -50000px; left: -50000px;" autocomplete="off"></textarea>

  <noscript>
    <h2>Javascript Required</h2>
    <p>You need to enable Javascript in your browser to edit pages.</p>
  </noscript>

  </form>
  
  
  <div id="plainTextEditor" style="position:relative;display:none" class="editorLayer">
    <textarea style="height: 450px;" id="textEditor" class="autogrow"></textarea>
    <p style="clear:both;" align="right"><a href="http://help.wikispaces.com/help.wikitext" class="WikispacesHelpLink" data-help="help.wikitext">help on how to format text</a></p>
  </div>
</div>




  </div>
  <div class="commentColumn WikispacesStream"><div class="WikispacesContent WikispacesBs"><div class="commentList"></div></div></div>
</div>

</div></div><div id="sentinel" style="clear:both"></div></td>
          <td id="rightGradient"></td>
        </tr>
        <tr>
          <td id="bottomLeftGradient"></td>
          <td id="bottomGradient"></td>
          <td id="bottomRightGradient"></td>
        </tr>
        <tr>
          <td colspan="3" class="footer">
            <div class="WikiFooterNav WikiElement">
<a href="http://help.wikispaces.com/" rel="nofollow" class="WikispacesHelpTrigger">Help</a> ·
<a href="http://www.wikispaces.com/about">About</a> ·
<a href="http://blog.wikispaces.com/" target="_new">Blog</a> ·
<a href="http://www.wikispaces.com/content/pricing" rel="nofollow">Pricing</a> ·
<a href="http://www.wikispaces.com/privacy" rel="nofollow">Privacy</a> ·
<a href="http://www.wikispaces.com/terms" rel="nofollow">Terms</a> ·
<a href="http://www.wikispaces.com/site/help?url=http%3A%2F%2Fweka.wikispaces.com%2FUse%2BWEKA%2Bin%2Byour%2BJava%2Bcode" rel="nofollow"><strong>Support</strong></a> ·
<a href="http://weka.wikispaces.com/space/subscribe/upgrade"><strong>Upgrade</strong></a>
</div>            <div class="WikiLicense WikiElement">Contributions to http://weka.wikispaces.com/ are licensed under a <a rel="license" href="http://www.creativecommons.org/licenses/by-sa/3.0">Creative Commons Attribution Share-Alike 3.0 License</a>. <a rel="license" href="http://www.creativecommons.org/licenses/by-sa/3.0"><img src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/by-sa_3.png" alt="Creative Commons Attribution Share-Alike 3.0 License" height="15" width="85"></a><br>Portions not contributed by visitors are Copyright 2013 Tangient LLC</div>          </td>
        </tr>
      </tbody></table>
    </div>
  </div>

</div> <!--end wrapper-->

<div class="WikispacesHelp" style="display:none">
  <div class="WikispacesHelpControls">
    <span class="WikispacesHelpBreadcrumbs">
      <span class="WikispacesHelpBreadcrumb WikispacesHelpBreadcrumbHome WikispacesHelpBreadcrumbCurrent">
        <a href="http://help.wikispaces.com/" onclick="return ws.help.gotoBreadcrumb(0);">Home</a>
      </span>
      <span class="WikispacesHelpBreadcrumbsEllipsis" style="display: none;">
        &gt; ...
      </span>
      <span class="WikispacesHelpBreadcrumbSpinner"></span>
    </span>
  </div>
  <div class="WikispacesHelpContent wiki">Loading...</div>

  <div class="WikispacesGettingStartedControls">
    <span class="WikispacesGettingStartedBreadcrumbs">
      <span class="WikispacesHelpBreadcrumb WikispacesGettingStartedBreadcrumbHome WikispacesHelpBreadcrumbCurrent">
        <a href="#" onclick="return ws.help.showGettingStartedHome();">Home</a>
      </span>
      <span class="WikispacesGettingStartedCategory"></span>
    </span>

    <a href="http://www.wikispaces.com/site/gettingstarted/off" style="position: absolute; right: 50px;">Turn Off "Getting Started"</a>

  </div>
  <div class="WikispacesGettingStartedContent wiki">Loading...</div>
</div>
</div>
<script src="weka%20-%20Use%20WEKA%20in%20your%20Java%20code_files/q76j1537-editorc.js" type="text/javascript"></script>

<script type="text/javascript">

ws.namespace('ws.context');
ws.context = {
  instance: {
    id: '1',
    url: 'wikispaces.com',
    isMain: true,
    supportsGoogleDocs: false
  },
  user: {
    id: '',
    username: '',
    status: '',
    imageUrl: 'http://c1.wikicdn.com/i/user_none_lg.jpg'
  },
  wiki: {
    id: '2171807',
    name: 'weka',
    text: 'weka',
    module: 'B'
  },
  project: {
    id: '',
    name: ''
  },
  space: {
    id: '2171807',
    name: 'weka',
    isDefaultSpace: true
  },

  environment_name: 'prod',
  userCanAdministerWiki: false,

  path: {
    object: 'page',
    method: 'view',
    page: 'Use WEKA in your Java code',
    id: ''
  },

  settings: {
    main_domain: 'wikispaces.com',
    asset_url_prefix: 'http://c1.wikicdn.com',
    beta_features: false,
    isMobileSite: false,
    isUploadCapable: true,
    can_discuss: false,
    has_gdocs: false
  },
  clockSkewMillis: 1381854942204 - ((window.performance && window.performance.timing.responseStart > 0) ? window.performance.timing.responseStart : (new Date()).getTime())
}

</script><script type="text/javascript">
<!--

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

jQuery(document).ready(function() {
  ws.help.attachHelpWindow();
});

jQuery(document).ready(function($) {
  
  function tipPlacement() {
    return this.$element.closest('.ws-menu-bar .btn-group').is('.open') ? 'top' : 'bottom';
  }

  

  $('.ws-menu-bar').each(function() {
    var $menuBar = $(this);
    var $tagDropdown = $menuBar.find('.ws-tag-dropdown-menu');
    $menuBar.find('.tipme').tooltip({placement: tipPlacement, container: '.ws-menu-bar'});

    
    $menuBar.find('.ws-btn-more').click(ws.common.makeLinkClickFunction(function(e) {
      if ($(this).closest('.ws-menu-bar .btn-group').is('.open')) {
        ws.common.hideMorePageBar();
      } else {
        ws.common.showMorePageBar();
      }
    }));

    $menuBar.on('click', '.ws-tag-dropdown-toggle', ws.common.makeLinkClickFunction(function(e) {
      if ($(this).closest('.ws-menu-bar .dropdown').is('.open')) {
        ws.common.hideTagDropdown();
      } else {
        ws.common.showTagDropdown();
      }
    }));

    $(document.body).click(function(e) {
      var $target = $(e.target);
      if (!$target.closest('.ws-more-menu').closest('.ws-menu-bar').is($menuBar)
          || $target.closest('a').is('.WikispacesDialogLink')) {
        ws.common.hideMorePageBar();
      }
      if ($tagDropdown.length && !$target.closest('.ws-tag-dropdown-menu').is($tagDropdown)) {
        ws.common.hideTagDropdown();
      }
    });
    
  });
});


jQuery(document).ready(function($) {
  $('.ws-more-menu').on('click', 'a', function(e) {
    if ($(this).is('.disabled')) {
      e.preventDefault();
    }
  });
});

var wikispaces_can_edit = false;

jQuery(document).ready(function() {
  var editUrl = 'http://weka.wikispaces.com/page/edit/Use+WEKA+in+your+Java+code?goto=http%3A%2F%2Fweka.wikispaces.com%2FUse%2BWEKA%2Bin%2Byour%2BJava%2Bcode';

  jQuery('#editFromTemplate').change(function() {
    window.location = ws.common.addUriParams(editUrl, [['template', jQuery(this).val()]]);
  });
});


jQuery(document).ready(function() {
  ws.editor.loadEditorLibs('http://www.wikispaces.com/site/editorlibs/en_US/6zx1z8k7.gz.js');
});


ws.editor.startEditor = function (moreCoreOptions, moreMainOptions) {
  wikispaces_can_edit = true;

  var coreOptions = {
    'content_css': 'http://www.wikispaces.com/stylesheet/editori/217420326D.gz.css'
  };

  var mainOptions = {
    'wssave_cancel_url': '/Use+WEKA+in+your+Java+code',
    'wsimage_upload_url': 'http://weka.wikispaces.com/file/multiupload',
    'wsimage_max_file_size_mb': '10',
    'wsimage_page_view_group': ''
  };

  ws.editor.loadEditor(jQuery.extend(coreOptions, moreCoreOptions), jQuery.extend(mainOptions, moreMainOptions));
};

  var wikispaces_page_version = '398370896';

  jQuery(document).ready(function() {
    ws.editor.enableButtons();
  });



--></script><!-- w17 177 mem:6:57(29) wki:1:2(2) tot:177:177(1) -->


<div style="position: absolute; top: -10000px; left: -10000px; width: 100px; font-size: 13px; font-family: monospace; line-height: 16px; resize: none;"></div></body></html>